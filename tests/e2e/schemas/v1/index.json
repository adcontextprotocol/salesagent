{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "/schemas/v1/index.json",
  "title": "AdCP Schema Registry v1",
  "version": "1.0.0",
  "description": "Registry of all AdCP JSON schemas for validation and discovery",
  "adcp_version": "2.1.0",
  "standard_formats_version": "2.0.0",
  "versioning": {
    "note": "AdCP uses path-based versioning. The schema URL path (/schemas/v1/) indicates the version. Individual request/response schemas do NOT include adcp_version fields. Compatibility follows semantic versioning rules."
  },
  "changelog": {
    "2.0.0": {
      "date": "2025-10-14",
      "breaking_changes": [
        "Added renders array to Format schema with role and dimensions fields (replaces top-level dimensions)",
        "Formats now specify rendered outputs via renders array - enables companion ads, adaptive formats, and multi-placement",
        "Each render includes role (primary, companion, mobile_variant, etc.) and structured dimensions object",
        "Removed string dimensions field from standard display formats",
        "Renamed preview response 'outputs' to 'renders' to avoid confusion with generative format output_format_ids",
        "Removed format_id from preview renders (all renders are from the same format)",
        "Removed hints object from preview renders (use format lookup for render specifications instead)",
        "Changed preview render field names: output_id→render_id, output_role→role, added dimensions field"
      ],
      "rationale": "Renders array with structured dimensions eliminates parsing ambiguity and uniformly supports single and multi-render formats. Multi-render preview support enables companion ads and adaptive formats. Terminology changes prevent confusion between preview rendering and generative format outputs. Simplified schema removes redundant fields."
    },
    "1.8.0": {
      "date": "2025-10-13",
      "changes": [
        "Previous version with string-based dimensions"
      ]
    }
  },
  "lastUpdated": "2025-10-19",
  "baseUrl": "/schemas/v1",
  "schemas": {
    "core": {
      "description": "Core data models used throughout AdCP",
      "schemas": {
        "product": {
          "$ref": "/schemas/v1/core/product.json",
          "description": "Represents available advertising inventory"
        },
        "media-buy": {
          "$ref": "/schemas/v1/core/media-buy.json",
          "description": "Represents a purchased advertising campaign"
        },
        "package": {
          "$ref": "/schemas/v1/core/package.json",
          "description": "A specific product within a media buy (line item)"
        },
        "creative-asset": {
          "$ref": "/schemas/v1/core/creative-asset.json",
          "description": "Creative asset for upload to library - supports static assets, generative formats, and third-party ad serving (VAST, DAAST, HTML, JavaScript)"
        },
        "targeting": {
          "$ref": "/schemas/v1/core/targeting.json",
          "description": "Audience targeting criteria"
        },
        "frequency-cap": {
          "$ref": "/schemas/v1/core/frequency-cap.json",
          "description": "Frequency capping settings"
        },
        "format": {
          "$ref": "/schemas/v1/core/format.json",
          "description": "Represents a creative format with its requirements"
        },
        "measurement": {
          "$ref": "/schemas/v1/core/measurement.json",
          "description": "Measurement capabilities included with a product"
        },
        "delivery-metrics": {
          "$ref": "/schemas/v1/core/delivery-metrics.json",
          "description": "Standard delivery metrics for reporting"
        },
        "creative-policy": {
          "$ref": "/schemas/v1/core/creative-policy.json",
          "description": "Creative requirements and restrictions for a product"
        },
        "response": {
          "$ref": "/schemas/v1/core/response.json",
          "description": "Standard response structure (MCP)"
        },
        "error": {
          "$ref": "/schemas/v1/core/error.json",
          "description": "Standard error structure"
        },
        "sub-asset": {
          "$ref": "/schemas/v1/core/sub-asset.json",
          "description": "Sub-asset for multi-asset creative formats"
        },
        "creative-assignment": {
          "$ref": "/schemas/v1/core/creative-assignment.json",
          "description": "Assignment of a creative asset to a package"
        },
        "creative-manifest": {
          "$ref": "/schemas/v1/core/creative-manifest.json",
          "description": "Complete specification of a creative with all assets needed for rendering"
        },
        "performance-feedback": {
          "$ref": "/schemas/v1/core/performance-feedback.json",
          "description": "Performance feedback data for a media buy or package"
        },
        "property": {
          "$ref": "/schemas/v1/core/property.json",
          "description": "An advertising property that can be validated via adagents.json"
        },
        "brand-manifest": {
          "$ref": "/schemas/v1/core/brand-manifest.json",
          "description": "Standardized brand information manifest for creative generation and media buying"
        },
        "brand-manifest-ref": {
          "$ref": "/schemas/v1/core/brand-manifest-ref.json",
          "description": "Brand manifest reference (inline object or URL)"
        },
        "promoted-products": {
          "$ref": "/schemas/v1/core/promoted-products.json",
          "description": "Product or offering selection for campaigns with multiple selection methods"
        },
        "start-timing": {
          "$ref": "/schemas/v1/core/start-timing.json",
          "description": "Campaign start timing: 'asap' or ISO 8601 date-time"
        },
        "pricing-option": {
          "$ref": "/schemas/v1/core/pricing-option.json",
          "description": "A pricing model option offered by a publisher for a product"
        },
        "protocol-envelope": {
          "$ref": "/schemas/v1/core/protocol-envelope.json",
          "description": "Standard envelope structure added by protocol layer (MCP, A2A, REST) that wraps task response payloads with protocol-level fields like status, context_id, task_id, and message"
        }
      }
    },
    "enums": {
      "description": "Enumerated types and constants",
      "schemas": {
        "pricing-model": {
          "$ref": "/schemas/v1/enums/pricing-model.json",
          "description": "Supported pricing models for advertising products"
        },
        "delivery-type": {
          "$ref": "/schemas/v1/enums/delivery-type.json",
          "description": "Type of inventory delivery"
        },
        "media-buy-status": {
          "$ref": "/schemas/v1/enums/media-buy-status.json",
          "description": "Status of a media buy"
        },
        "package-status": {
          "$ref": "/schemas/v1/enums/package-status.json",
          "description": "Status of a package"
        },
        "creative-status": {
          "$ref": "/schemas/v1/enums/creative-status.json",
          "description": "Status of a creative asset"
        },
        "pacing": {
          "$ref": "/schemas/v1/enums/pacing.json",
          "description": "Budget pacing strategy"
        },
        "frequency-cap-scope": {
          "$ref": "/schemas/v1/enums/frequency-cap-scope.json",
          "description": "Scope for frequency cap application"
        },
        "standard-format-ids": {
          "$ref": "/schemas/v1/enums/standard-format-ids.json",
          "description": "Enumeration of all standard creative format identifiers"
        },
        "identifier-types": {
          "$ref": "/schemas/v1/enums/identifier-types.json",
          "description": "Valid identifier types for property identification across different media types"
        },
        "task-status": {
          "$ref": "/schemas/v1/enums/task-status.json",
          "description": "Standardized task status values based on A2A TaskState enum"
        }
      }
    },
    "pricing-options": {
      "description": "Individual pricing model schemas with model-specific validation. CPM and vCPM support both fixed and auction pricing; all other models are fixed-rate only.",
      "schemas": {
        "cpm-fixed-option": {
          "$ref": "/schemas/v1/pricing-options/cpm-fixed-option.json",
          "description": "Cost Per Mille (CPM) fixed-rate pricing for direct/guaranteed deals"
        },
        "cpm-auction-option": {
          "$ref": "/schemas/v1/pricing-options/cpm-auction-option.json",
          "description": "Cost Per Mille (CPM) auction-based pricing for programmatic/non-guaranteed inventory"
        },
        "vcpm-fixed-option": {
          "$ref": "/schemas/v1/pricing-options/vcpm-fixed-option.json",
          "description": "Viewable Cost Per Mille (vCPM) fixed-rate pricing for viewability-guaranteed deals"
        },
        "vcpm-auction-option": {
          "$ref": "/schemas/v1/pricing-options/vcpm-auction-option.json",
          "description": "Viewable Cost Per Mille (vCPM) auction-based pricing for programmatic inventory with viewability guarantee"
        },
        "cpc-option": {
          "$ref": "/schemas/v1/pricing-options/cpc-option.json",
          "description": "Cost Per Click (CPC) fixed-rate pricing for performance campaigns"
        },
        "cpcv-option": {
          "$ref": "/schemas/v1/pricing-options/cpcv-option.json",
          "description": "Cost Per Completed View (CPCV) fixed-rate pricing for video/audio"
        },
        "cpv-option": {
          "$ref": "/schemas/v1/pricing-options/cpv-option.json",
          "description": "Cost Per View (CPV) fixed-rate pricing with threshold"
        },
        "cpp-option": {
          "$ref": "/schemas/v1/pricing-options/cpp-option.json",
          "description": "Cost Per Point (CPP) fixed-rate pricing for TV/audio with demographic measurement"
        },
        "flat-rate-option": {
          "$ref": "/schemas/v1/pricing-options/flat-rate-option.json",
          "description": "Flat rate pricing for DOOH and sponsorships"
        }
      }
    },
    "media-buy": {
      "description": "Media buy task request/response schemas",
      "supporting-schemas": {
        "package-request": {
          "$ref": "/schemas/v1/media-buy/package-request.json",
          "description": "Package configuration for media buy creation - used within create_media_buy request"
        }
      },
      "tasks": {
        "get-products": {
          "request": {
            "$ref": "/schemas/v1/media-buy/get-products-request.json",
            "description": "Request parameters for discovering available advertising products"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/get-products-response.json",
            "description": "Response payload for get_products task"
          }
        },
        "list-creative-formats": {
          "request": {
            "$ref": "/schemas/v1/media-buy/list-creative-formats-request.json",
            "description": "Request parameters for discovering format IDs and creative agents supported by this sales agent"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/list-creative-formats-response.json",
            "description": "Response payload with format_ids and creative_agents list. Sales agent returns which formats it supports and which creative agents provide those formats. Buyers query creative agents for full format specifications."
          }
        },
        "create-media-buy": {
          "request": {
            "$ref": "/schemas/v1/media-buy/create-media-buy-request.json",
            "description": "Request parameters for creating a media buy"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/create-media-buy-response.json",
            "description": "Response payload for create_media_buy task"
          }
        },
        "sync-creatives": {
          "request": {
            "$ref": "/schemas/v1/media-buy/sync-creatives-request.json",
            "description": "Request parameters for syncing creative assets with upsert semantics"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/sync-creatives-response.json",
            "description": "Response payload for sync_creatives task"
          }
        },
        "list-creatives": {
          "request": {
            "$ref": "/schemas/v1/media-buy/list-creatives-request.json",
            "description": "Request parameters for querying creative library with filtering and pagination"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/list-creatives-response.json",
            "description": "Response payload for list_creatives task"
          }
        },
        "update-media-buy": {
          "request": {
            "$ref": "/schemas/v1/media-buy/update-media-buy-request.json",
            "description": "Request parameters for updating campaign and package settings"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/update-media-buy-response.json",
            "description": "Response payload for update_media_buy task"
          }
        },
        "get-media-buy-delivery": {
          "request": {
            "$ref": "/schemas/v1/media-buy/get-media-buy-delivery-request.json",
            "description": "Request parameters for retrieving comprehensive delivery metrics"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/get-media-buy-delivery-response.json",
            "description": "Response payload for get_media_buy_delivery task"
          }
        },
        "list-authorized-properties": {
          "request": {
            "$ref": "/schemas/v1/media-buy/list-authorized-properties-request.json",
            "description": "Request parameters for discovering all properties this agent is authorized to represent"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/list-authorized-properties-response.json",
            "description": "Response payload for list_authorized_properties task"
          }
        },
        "provide-performance-feedback": {
          "request": {
            "$ref": "/schemas/v1/media-buy/provide-performance-feedback-request.json",
            "description": "Request parameters for sharing performance outcomes with publishers"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/provide-performance-feedback-response.json",
            "description": "Response payload for provide_performance_feedback task"
          }
        }
      }
    },
    "creative": {
      "description": "Creative protocol task request/response schemas and asset type definitions",
      "tasks": {
        "build-creative": {
          "request": {
            "$ref": "/schemas/v1/media-buy/build-creative-request.json",
            "description": "Request parameters for AI-powered creative generation"
          },
          "response": {
            "$ref": "/schemas/v1/media-buy/build-creative-response.json",
            "description": "Response payload for build_creative task"
          }
        },
        "preview-creative": {
          "request": {
            "$ref": "/schemas/v1/creative/preview-creative-request.json",
            "description": "Request parameters for generating creative previews"
          },
          "response": {
            "$ref": "/schemas/v1/creative/preview-creative-response.json",
            "description": "Response payload for preview_creative task"
          }
        },
        "list-creative-formats": {
          "request": {
            "$ref": "/schemas/v1/creative/list-creative-formats-request.json",
            "description": "Request parameters for discovering creative formats from this creative agent"
          },
          "response": {
            "$ref": "/schemas/v1/creative/list-creative-formats-response.json",
            "description": "Response payload with full format definitions - this is the authoritative source for format specifications"
          }
        }
      },
      "asset_types": {
        "$ref": "/schemas/v1/creative/asset-types/index.json",
        "description": "Asset type definitions for creative manifests"
      }
    },
    "signals": {
      "description": "Signals protocol task request/response schemas",
      "tasks": {
        "get-signals": {
          "request": {
            "$ref": "/schemas/v1/signals/get-signals-request.json",
            "description": "Request parameters for discovering signals based on description"
          },
          "response": {
            "$ref": "/schemas/v1/signals/get-signals-response.json",
            "description": "Response payload for get_signals task"
          }
        },
        "activate-signal": {
          "request": {
            "$ref": "/schemas/v1/signals/activate-signal-request.json",
            "description": "Request parameters for activating a signal on a specific platform/account"
          },
          "response": {
            "$ref": "/schemas/v1/signals/activate-signal-response.json",
            "description": "Response payload for activate_signal task"
          }
        }
      }
    },
    "adagents": {
      "description": "Authorized sales agents file format specification",
      "$ref": "/schemas/v1/adagents.json",
      "file_location": "/.well-known/adagents.json",
      "purpose": "Declares which sales agents are authorized to sell a publisher's advertising inventory"
    },
    "standard-formats": {
      "description": "Standard creative formats registry and schemas (formats will be provided by reference creative agent)",
      "$ref": "/schemas/v1/standard-formats/index.json"
    }
  },
  "usage": {
    "validation": "Use these schemas to validate AdCP requests and responses",
    "codeGeneration": "Generate client SDKs using these schemas",
    "documentation": "Reference schemas for API documentation",
    "testing": "Validate test fixtures and examples"
  },
  "examples": [
    {
      "language": "javascript",
      "description": "JavaScript validation example",
      "code": "const Ajv = require('ajv'); const ajv = new Ajv(); const schema = require('./schemas/v1/core/product.json'); const validate = ajv.compile(schema);"
    },
    {
      "language": "python",
      "description": "Python validation example",
      "code": "import jsonschema; schema = {...}; jsonschema.validate(data, schema)"
    },
    {
      "language": "java",
      "description": "Java validation example",
      "code": "// Use everit-org/json-schema or similar library"
    }
  ]
}
