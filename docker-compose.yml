services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: adcp
      POSTGRES_USER: adcp_user
      POSTGRES_PASSWORD: secure_password_change_me
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5435}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adcp_user -d adcp"]
      interval: 10s
      timeout: 5s
      retries: 5

  adcp-server:
    build: .
    environment:
      # Database configuration
      DATABASE_URL: postgresql://adcp_user:secure_password_change_me@postgres:5432/adcp?sslmode=disable

      # Secrets (loaded from host environment or .env.secrets file via shell)
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      SUPER_ADMIN_EMAILS: ${SUPER_ADMIN_EMAILS:-}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-}
      GAM_OAUTH_CLIENT_ID: ${GAM_OAUTH_CLIENT_ID:-}
      GAM_OAUTH_CLIENT_SECRET: ${GAM_OAUTH_CLIENT_SECRET:-}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}

      # Skip nginx for standalone service
      SKIP_NGINX: "true"

      # Optional: Dry run mode
      # ADCP_DRY_RUN: true

      # Testing mode (for E2E tests - relaxes validation)
      ADCP_TESTING: ${ADCP_TESTING:-false}

      # Create sample data for E2E tests (products, etc.)
      CREATE_SAMPLE_DATA: ${CREATE_SAMPLE_DATA:-true}

    depends_on:
      postgres:
        condition: service_healthy

    ports:
      - "${ADCP_SALES_PORT:-8092}:8080"
      - "${A2A_PORT:-8094}:8091"

    volumes:
      # Optional: Mount audit logs
      - ./audit_logs:/app/audit_logs

      # Optional: Mount for development
      # - .:/app

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin-ui:
    build: .
    command: python -m src.admin.server
    environment:
      DATABASE_URL: postgresql://adcp_user:secure_password_change_me@postgres:5432/adcp?sslmode=disable
      ADMIN_UI_PORT: ${ADMIN_UI_PORT:-8001}
      FLASK_ENV: production
      FLASK_DEBUG: ${FLASK_DEBUG:-0}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY:-dev-secret-key-change-in-production}
      # Test mode
      ADCP_AUTH_TEST_MODE: ${ADCP_AUTH_TEST_MODE:-false}

      # Secrets (loaded from host environment or .env.secrets file via shell)
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      SUPER_ADMIN_EMAILS: ${SUPER_ADMIN_EMAILS:-}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-}
      GAM_OAUTH_CLIENT_ID: ${GAM_OAUTH_CLIENT_ID:-}
      GAM_OAUTH_CLIENT_SECRET: ${GAM_OAUTH_CLIENT_SECRET:-}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}

      # Server ports - external ports for agent cards
      ADCP_SALES_PORT: ${ADCP_SALES_PORT:-8080}
      A2A_PORT: ${A2A_PORT:-8091}

      # Skip nginx for standalone service
      SKIP_NGINX: "true"

    depends_on:
      postgres:
        condition: service_healthy

    ports:
      - "${ADMIN_UI_PORT:-8001}:${ADMIN_UI_PORT:-8001}"

    volumes:
      # Mount OAuth credentials file
      # - ./client_secret.json:/app/client_secret.json:ro
      - ./audit_logs:/app/audit_logs

    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:$${ADMIN_UI_PORT:-8001}/health"]
      interval: 30s
      timeout: 10s
      retries: 3


volumes:
  postgres_data:
