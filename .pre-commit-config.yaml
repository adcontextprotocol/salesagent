repos:
  - repo: local
    hooks:

      # Check for tenant.config references
      - id: no-tenant-config
        name: No tenant.config references
        entry: sh -c 'if grep -r "tenant\.config\|tenant\[.config.\]" --include="*.py" . | grep -v "test_migration\|postmortem\|pre-commit"; then echo "Found tenant.config references!"; exit 1; fi'
        language: system
        pass_filenames: false

      # Enforce JSONType usage for all JSON columns
      - id: enforce-jsontype
        name: Enforce JSONType usage (not plain JSON)
        entry: sh -c 'if grep -rE "Column\(JSON[,)]" --include="*.py" src/core/database/models.py; then echo "❌ Found Column(JSON) usage! Use Column(JSONType) instead. See CLAUDE.md for pattern."; exit 1; fi'
        language: system
        pass_filenames: false
        always_run: true

      # Prevent skipping tests (but allow skip_ci for CI-specific issues)
      - id: no-skip-tests
        name: No @pytest.mark.skip decorators allowed
        entry: sh -c 'if grep -r "@pytest\.mark\.skip[^_]" --include="test_*.py" tests/ | grep -v skip_ci; then echo "❌ Found @pytest.mark.skip decorators! Tests must not be skipped."; exit 1; fi'
        language: system
        pass_filenames: false
        always_run: true

      # Prevent over-mocking (mocking internal implementation instead of external I/O)
      - id: no-excessive-mocking
        name: Prevent excessive mocking in tests
        entry: uv run python scripts/check_test_mocking.py
        language: system
        pass_filenames: false
        always_run: true

      # Check for missing imports (prevent NameError bugs)
      - id: check-import-usage
        name: Check for classes/functions used without imports
        entry: uv run python .pre-commit-hooks/check_import_usage.py
        language: system
        files: '^src/.*\.py$'
        pass_filenames: true

      # Check for unsafe response attribute access (prevent AttributeError bugs)
      - id: check-response-attribute-access
        name: Detect unsafe response attribute access patterns
        entry: uv run python scripts/hooks/check_response_attribute_access.py
        language: system
        files: '^src/.*\.py$'
        pass_filenames: true

      # Check A2A skill test coverage
      - id: a2a-skill-coverage
        name: Verify 100% A2A skill coverage
        entry: uv run python scripts/check_a2a_skill_coverage.py
        language: system
        pass_filenames: false
        always_run: true

      # Detect testing anti-patterns (over-mocking, missing coverage)
      - id: detect-test-antipatterns
        name: Detect testing anti-patterns
        entry: uv run python scripts/detect_test_antipatterns.py
        language: system
        files: '^(tests/.*\.py|src/a2a_server/adcp_a2a_server\.py)$'
        pass_filenames: true

      # Check roundtrip tests exist for all apply_testing_hooks calls
      - id: check-roundtrip-tests
        name: Verify roundtrip tests exist for apply_testing_hooks operations
        entry: uv run python .pre-commit-hooks/check_roundtrip_tests.py
        language: system
        pass_filenames: false
        always_run: true

      # Check MCP/A2A parameter alignment
      - id: check-parameter-alignment
        name: Check MCP/A2A parameter alignment with _impl functions
        entry: sh -c 'uv run python .pre-commit-hooks/check_parameter_alignment.py || echo "⚠️  Parameter mismatches found (non-blocking for now)" >&2'
        language: system
        pass_filenames: false
        always_run: true

      # Ensure smoke tests pass
      - id: smoke-tests
        name: Run smoke tests (critical paths)
        entry: uv run pytest tests/smoke/ -v --tb=short -m smoke
        language: system
        pass_filenames: false
        stages: [manual]  # Run with: pre-commit run smoke-tests

      # Check for multiple Alembic migration heads
      - id: check-migration-heads
        name: Check for multiple Alembic migration heads
        entry: uv run python scripts/ops/check_migration_heads.py --quiet
        language: system
        pass_filenames: false
        always_run: true

      # Validate migrations can run
      - id: test-migrations
        name: Test database migrations
        entry: sh -c 'cp adcp_local.db .test.db && DATABASE_URL=sqlite:///.test.db python migrate.py && rm .test.db'
        language: system
        pass_filenames: false
        stages: [manual]  # Changed from commit to manual - run with: pre-commit run test-migrations

      # Run quick unit tests before commit (optional - can be skipped with --no-verify)
      - id: pytest-unit
        name: Run unit tests (optional)
        entry: sh -c 'uv run pytest tests/unit/ -x --tb=short -q || echo "⚠️  Tests failed but continuing (use --no-verify to skip)"'
        language: system
        pass_filenames: false
        stages: [manual]  # Changed to manual - run with: pre-commit run pytest-unit
        verbose: true

      # Test AdCP contract compliance
      - id: adcp-contract-tests
        name: Verify AdCP protocol compliance
        entry: uv run pytest tests/unit/test_adcp_contract.py -v --tb=short
        language: system
        pass_filenames: false
        always_run: true

      # Test MCP contract validation (prevent validation errors like 'brief' is required)
      - id: mcp-contract-validation
        name: MCP contract validation tests
        entry: uv run pytest tests/integration/test_mcp_contract_validation.py -v --tb=short
        language: system
        files: '^(src/core/schemas\.py|src/core/main\.py)$'
        pass_filenames: false

      # Audit required fields to catch over-validation
      - id: audit-required-fields
        name: Audit required fields for over-validation
        entry: uv run python scripts/audit_required_fields.py
        language: system
        files: '^src/core/schemas\.py$'
        pass_filenames: false
        verbose: true

      # Check AdCP schema sync (critical for buyer compatibility)
      - id: adcp-schema-sync
        name: Verify AdCP schema sync
        entry: uv run python scripts/check_schema_sync.py --ci
        language: system
        pass_filenames: false
        always_run: true

      # Check Pydantic-AdCP schema alignment (prevents client validation errors like missing promoted_offering)
      - id: pydantic-adcp-alignment
        name: Pydantic model alignment with AdCP schemas (REGRESSION PREVENTION)
        entry: uv run pytest tests/unit/test_pydantic_schema_alignment.py::TestSpecificFieldValidation -v --tb=short
        language: system
        files: '^(src/core/schemas\.py|tests/e2e/schemas/v1/.*\.json)$'
        pass_filenames: false
        always_run: true

      # Prevent A2A regression issues (URL format, function calls)
      - id: a2a-regression-check
        name: A2A regression prevention
        entry: python3 scripts/validate_a2a_fixes.py
        language: system
        files: ^src/a2a_server/
        pass_filenames: false

      # Audit E2E tests for non-existent tool calls
      - id: e2e-test-audit
        name: E2E test contract validation (prevents calling non-existent tools)
        entry: uv run python scripts/audit_e2e_tests.py
        language: system
        pass_filenames: false
        always_run: true

      # Validate A2A AdCP spec compliance (prevents legacy format acceptance)
      - id: a2a-adcp-compliance
        name: A2A AdCP spec compliance validation
        entry: uv run python scripts/validate_a2a_adcp_compliance.py
        language: system
        files: ^src/a2a_server/
        pass_filenames: false

      # Prevent problematic function call patterns
      - id: no-fn-calls
        name: No .fn() call patterns
        entry: sh -c 'if grep -r "\.fn(" src/ --include="*.py" | grep -v test; then echo "❌ Found .fn() calls - use direct function calls"; exit 1; fi'
        language: system
        files: ^src/
        pass_filenames: false

      # Validate schema-database field alignment (prevents AttributeError bugs)
      - id: schema-database-alignment
        name: Schema-database field alignment validation
        entry: uv run python scripts/validate_schema_database_alignment.py --quiet
        language: system
        files: '^(src/core/schemas\.py|src/core/database/models\.py)$'
        pass_filenames: false

      # Validate MCP tool-schema parameter alignment (prevents datetime.combine bugs)
      - id: mcp-schema-alignment
        name: MCP tool-schema parameter alignment
        entry: uv run python tools/validate_mcp_schemas.py
        language: system
        files: '^(src/core/schemas\.py|src/core/main\.py)$'
        pass_filenames: false

      # Test MCP endpoints (requires server running)
      - id: mcp-endpoint-tests
        name: Test MCP endpoints
        entry: echo Run MCP tests with uv run pytest tests/integration/test_mcp_endpoints_comprehensive.py
        language: system
        pass_filenames: false
        stages: [manual]  # Manual because it needs server running


      # Validate template url_for calls
      - id: template-url-validation
        name: Validate template url_for calls
        entry: uv run pytest tests/integration/test_template_url_validation.py::TestTemplateUrlValidation::test_all_template_url_for_calls_resolve -q
        language: system
        files: '\.html$'
        pass_filenames: false


  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-json
      - id: check-merge-conflict
      - id: check-ast
      - id: debug-statements

  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        language_version: python3

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.11
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]

  # Type checking with mypy (manual for now - too many errors)
  # Run manually with: uv run mypy src/ --config-file=mypy.ini
  # - repo: https://github.com/pre-commit/mirrors-mypy
  #   rev: v1.18.2
  #   hooks:
  #     - id: mypy
  #       args: [--config-file=mypy.ini]
  #       additional_dependencies:
  #         - sqlalchemy[mypy]==2.0.36
  #         - types-requests
  #         - types-python-dateutil
  #       files: '^src/'
  #       exclude: '^src/adapters/google_ad_manager_original\.py$'
