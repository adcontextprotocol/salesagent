worker_processes auto;
error_log /dev/stderr warn;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '"x-fwd-proto: $http_x_forwarded_proto"';

    access_log /dev/stdout main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Upstream definitions for our services
    upstream mcp_backend {
        server 127.0.0.1:8080;
    }

    upstream admin_backend {
        server 127.0.0.1:8001;
    }

    # A2A backend for agent-to-agent communication
    upstream a2a_backend {
        server 127.0.0.1:8091;
    }

    server {
        listen 8000;
        server_name _;
        
        # Disable port in redirects (important for reverse proxy setups)
        port_in_redirect off;
        absolute_redirect off;
        
        # Pass through X-Forwarded headers from upstream proxy (Fly.io)
        # Fly.io uses Fly-Forwarded-Proto header
        set $proxy_x_forwarded_proto $http_fly_forwarded_proto;
        if ($proxy_x_forwarded_proto = "") {
            set $proxy_x_forwarded_proto $http_x_forwarded_proto;
        }
        if ($proxy_x_forwarded_proto = "") {
            set $proxy_x_forwarded_proto $scheme;
        }

        # Increase buffer sizes for large requests/responses
        client_max_body_size 10M;
        client_body_buffer_size 128k;
        proxy_buffer_size 4k;
        proxy_buffers 8 16k;
        proxy_busy_buffers_size 32k;

        # MCP Server at /mcp (pass through as-is, MCP expects /mcp/)
        location /mcp/ {
            proxy_pass http://mcp_backend/mcp/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

            # WebSocket support for MCP streaming
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
        }

        # Admin UI at /admin - DO NOT strip prefix, let Flask handle it
        location /admin/ {
            # Pass the full path including /admin/ prefix to the backend
            proxy_pass http://admin_backend/admin/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
            proxy_set_header X-Forwarded-Host $host;
            # Tell Flask it's mounted at /admin
            proxy_set_header X-Script-Name /admin;
        }

        # Redirect /admin to /admin/
        location = /admin {
            return 301 /admin/;
        }

        # A2A Server API for agent-to-agent communication
        location /a2a/ {
            rewrite ^/a2a/(.*)$ /$1 break;
            proxy_pass http://a2a_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

            # Support for streaming responses
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
        }

        # Redirect /a2a to /a2a/
        location = /a2a {
            return 301 /a2a/;
        }

        # Redirect /mcp to /mcp/
        location = /mcp {
            return 301 /mcp/;
        }

        # Root redirect to admin UI
        location = / {
            # Use relative redirect to avoid port issues
            return 302 /admin/;
        }

        # Health check endpoint for nginx itself
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
