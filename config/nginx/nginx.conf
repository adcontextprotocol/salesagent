user www-data;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml;

    # Upstream servers
    upstream mcp_server {
        server localhost:8080;
    }

    upstream admin_ui {
        server localhost:8001;
    }

    upstream a2a_server {
        server localhost:8091;
    }

    # Main unified server block
    # Handles:
    # - sales-agent.scope3.com (main domain)
    # - *.sales-agent.scope3.com (subdomains)
    # - external domains via Apx-Incoming-Host header
    server {
        listen 0.0.0.0:8000;
        server_name _;  # Accept all domains

        # Add tenant header for debugging
        add_header X-Tenant-Domain $http_apx_incoming_host always;
        add_header X-Server-Name $host always;

        # Determine the effective host (subdomain or external domain)
        set $effective_host $host;
        if ($http_apx_incoming_host != "") {
            set $effective_host $http_apx_incoming_host;
        }

        # Extract subdomain from effective host (e.g., "wonderstruck" from "wonderstruck.sales-agent.scope3.com")
        set $subdomain "";
        if ($effective_host ~ ^([^.]+)\.sales-agent\.scope3\.com$) {
            set $subdomain $1;
        }

        # Is this a subdomain or external domain request?
        set $is_tenant_request "no";
        if ($subdomain != "") {
            set $is_tenant_request "yes";
        }
        if ($http_apx_incoming_host ~ \.adcontextprotocol\.org$) {
            set $is_tenant_request "yes";
        }

        # Root URL logic:
        # - Main domain (sales-agent.scope3.com) → signup page (admin UI)
        # - Subdomain/external → tenant landing page (MCP server)
        location = / {
            # Main domain → signup
            if ($is_tenant_request = "no") {
                proxy_pass http://admin_ui/signup;
            }

            # Tenant domain → landing page (MCP server has the logic)
            proxy_pass http://mcp_server/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Apx-Incoming-Host $http_apx_incoming_host;
            proxy_set_header x-adcp-auth $http_x_adcp_auth;
        }

        # Admin UI routes (for subdomains and external domains)
        # External domains with /admin path → redirect to subdomain
        location /admin {
            # If external domain, redirect to subdomain equivalent
            if ($http_apx_incoming_host ~ ^([^.]+)\.adcontextprotocol\.org$) {
                return 301 https://$1.sales-agent.scope3.com/admin$is_args$args;
            }

            proxy_pass http://admin_ui/admin;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Apx-Incoming-Host $http_apx_incoming_host;
            proxy_cache_bypass $http_upgrade;
        }

        # Admin UI static assets
        location /static {
            proxy_pass http://admin_ui/static;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Admin UI auth endpoints
        location /auth {
            proxy_pass http://admin_ui/auth;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /callback {
            proxy_pass http://admin_ui/callback;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # MCP endpoint (single endpoint, not prefix)
        # FastMCP serves the MCP protocol at /mcp/ with trailing slash
        location /mcp/ {
            proxy_pass http://mcp_server/mcp/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Apx-Incoming-Host $http_apx_incoming_host;
            proxy_set_header x-adcp-auth $http_x_adcp_auth;
            proxy_set_header Authorization $http_authorization;
            proxy_cache_bypass $http_upgrade;
        }

        # MCP without trailing slash → redirect to with slash
        location = /mcp {
            return 307 /mcp/;
        }

        # A2A endpoint (single endpoint, not prefix)
        location /a2a/ {
            proxy_pass http://a2a_server/a2a/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Apx-Incoming-Host $http_apx_incoming_host;
            proxy_set_header x-adcp-auth $http_x_adcp_auth;
            proxy_set_header Authorization $http_authorization;
            proxy_cache_bypass $http_upgrade;
        }

        # A2A without trailing slash → redirect to with slash
        location = /a2a {
            return 307 /a2a/;
        }

        # A2A agent discovery endpoints
        location /.well-known/ {
            proxy_pass http://a2a_server/.well-known/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Apx-Incoming-Host $http_apx_incoming_host;
        }

        # A2A agent card endpoint
        location = /agent.json {
            proxy_pass http://a2a_server/agent.json;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Apx-Incoming-Host $http_apx_incoming_host;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
