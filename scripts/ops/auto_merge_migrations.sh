#!/bin/bash
# Automatic migration merge script for CI/pre-push hooks
#
# This script detects multiple Alembic migration heads and automatically
# creates a merge migration to resolve them.
#
# Exit codes:
#   0 - No multiple heads (or successfully merged)
#   1 - Multiple heads exist and need manual attention
#   2 - Error during check/merge

set -e

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$SCRIPT_DIR/../.."

# Color codes
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Not in a git repository${NC}"
    exit 2
fi

# Check for multiple heads
echo "üîç Checking for multiple Alembic migration heads..."

# Run check script (will exit 1 if multiple heads detected)
if uv run python "$SCRIPT_DIR/check_migration_heads.py" --quiet; then
    echo -e "${GREEN}‚úÖ No multiple migration heads detected${NC}"
    exit 0
fi

# Multiple heads detected - ask user what to do
echo -e "${YELLOW}‚ö†Ô∏è  Multiple migration heads detected!${NC}"
echo ""
echo "This usually happens when:"
echo "  - Multiple feature branches each added migrations"
echo "  - Branches were merged without merging migrations first"
echo ""
echo "Options:"
echo "  1) Auto-merge now (creates merge migration and commits)"
echo "  2) Cancel push and merge manually"
echo ""

# Check if running in CI or non-interactive environment
if [ -z "$CI" ] && [ -t 0 ]; then
    # Interactive mode - ask user
    read -p "Auto-merge migrations? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo ""
        echo "To fix manually:"
        echo "  1. uv run alembic merge -m 'Merge migration heads' head"
        echo "  2. git add alembic/versions/*.py"
        echo "  3. git commit -m 'Merge Alembic migration heads'"
        echo ""
        exit 1
    fi
else
    # Non-interactive (CI) - auto-merge
    echo "Running in non-interactive mode - auto-merging..."
fi

# Auto-merge
echo ""
echo "üîß Creating merge migration..."

if ! uv run python "$SCRIPT_DIR/check_migration_heads.py" --fix; then
    echo -e "${RED}‚ùå Failed to create merge migration${NC}"
    exit 2
fi

# Find the newly created merge migration file
MERGE_FILE=$(find "$PROJECT_ROOT/alembic/versions" -name "*merge*.py" -o -name "*heads*.py" | sort -r | head -1)

if [ -z "$MERGE_FILE" ]; then
    echo -e "${RED}‚ùå Could not find generated merge migration file${NC}"
    exit 2
fi

echo "üìù Generated merge migration: $(basename "$MERGE_FILE")"

# Stage the new migration file
git add "$MERGE_FILE"

# Check if we should commit (only if not already in a commit)
if [ -z "$GIT_AUTHOR_DATE" ]; then
    # Not in a commit - create one
    echo "üíæ Committing merge migration..."
    git commit -m "Merge Alembic migration heads

Generated automatically to resolve multiple heads from branch merges.

ü§ñ Auto-generated by migration merge script"

    echo ""
    echo -e "${GREEN}‚úÖ Migration heads merged and committed${NC}"
    echo ""
    echo "Next steps:"
    echo "  1. Review the generated merge migration"
    echo "  2. Test migrations: uv run python scripts/ops/migrate.py"
    echo "  3. Continue with your push"
else
    # Already in a commit - just stage
    echo ""
    echo -e "${GREEN}‚úÖ Migration heads merged (added to current commit)${NC}"
fi

exit 0
