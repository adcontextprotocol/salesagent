# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_package-request_json.json
#   source_etag: W/"68f2761a-84b"
#   source_last_modified: Fri, 17 Oct 2025 17:00:10 GMT

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Literal, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel


class FormatId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    agent_url: Annotated[
        AnyUrl,
        Field(
            description="URL of the agent that defines this format (e.g., 'https://creatives.adcontextprotocol.org' for standard formats, or 'https://publisher.com/.well-known/adcp/sales' for custom formats)"
        ),
    ]
    id: Annotated[
        str,
        Field(
            description="Format identifier within the agent's namespace (e.g., 'display_300x250', 'video_standard_30s')",
            pattern="^[a-zA-Z0-9_-]+$",
        ),
    ]


class Pacing(Enum):
    even = "even"
    asap = "asap"
    front_loaded = "front_loaded"


class GeoCountryAnyOfItem(RootModel[str]):
    root: Annotated[str, Field(pattern="^[A-Z]{2}$")]


class FrequencyCap(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    suppress_minutes: Annotated[float, Field(description="Minutes to suppress after impression", ge=0.0)]


class TargetingOverlay(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    geo_country_any_of: Annotated[
        Optional[list[GeoCountryAnyOfItem]],
        Field(
            description="Restrict delivery to specific countries (ISO codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_region_any_of: Annotated[
        Optional[list[str]],
        Field(
            description="Restrict delivery to specific regions/states. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_metro_any_of: Annotated[
        Optional[list[str]],
        Field(
            description="Restrict delivery to specific metro areas (DMA codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_postal_code_any_of: Annotated[
        Optional[list[str]],
        Field(
            description="Restrict delivery to specific postal/ZIP codes. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    frequency_cap: Annotated[
        Optional[FrequencyCap],
        Field(description="Frequency capping settings for package-level application", title="Frequency Cap"),
    ] = None


class Assets(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["image"]
    url: Annotated[AnyUrl, Field(description="URL to the image asset")]
    width: Annotated[Optional[int], Field(description="Image width in pixels", ge=1)] = None
    height: Annotated[Optional[int], Field(description="Image height in pixels", ge=1)] = None
    format: Annotated[Optional[str], Field(description="Image file format (jpg, png, gif, webp, etc.)")] = None
    alt_text: Annotated[Optional[str], Field(description="Alternative text for accessibility")] = None


class Assets51(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["video"]
    url: Annotated[AnyUrl, Field(description="URL to the video asset")]
    width: Annotated[Optional[int], Field(description="Video width in pixels", ge=1)] = None
    height: Annotated[Optional[int], Field(description="Video height in pixels", ge=1)] = None
    duration_ms: Annotated[Optional[int], Field(description="Video duration in milliseconds", ge=0)] = None
    format: Annotated[Optional[str], Field(description="Video file format (mp4, webm, mov, etc.)")] = None
    bitrate_kbps: Annotated[Optional[int], Field(description="Video bitrate in kilobits per second", ge=1)] = None


class Assets52(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["audio"]
    url: Annotated[AnyUrl, Field(description="URL to the audio asset")]
    duration_ms: Annotated[Optional[int], Field(description="Audio duration in milliseconds", ge=0)] = None
    format: Annotated[Optional[str], Field(description="Audio file format (mp3, wav, aac, etc.)")] = None
    bitrate_kbps: Annotated[Optional[int], Field(description="Audio bitrate in kilobits per second", ge=1)] = None


class Assets53(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["text"]
    content: Annotated[str, Field(description="Text content")]
    max_length: Annotated[Optional[int], Field(description="Maximum character length constraint", ge=1)] = None
    language: Annotated[Optional[str], Field(description="Language code (e.g., 'en', 'es', 'fr')")] = None


class Assets54(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["html"]
    content: Annotated[str, Field(description="HTML content")]
    version: Annotated[Optional[str], Field(description="HTML version (e.g., 'HTML5')")] = None


class Assets55(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["css"]
    content: Annotated[str, Field(description="CSS content")]
    media: Annotated[Optional[str], Field(description="CSS media query context (e.g., 'screen', 'print')")] = None


class ModuleType(Enum):
    esm = "esm"
    commonjs = "commonjs"
    script = "script"


class Assets56(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["javascript"]
    content: Annotated[str, Field(description="JavaScript content")]
    module_type: Annotated[Optional[ModuleType], Field(description="JavaScript module type")] = None


class VastVersion(Enum):
    field_2_0 = "2.0"
    field_3_0 = "3.0"
    field_4_0 = "4.0"
    field_4_1 = "4.1"
    field_4_2 = "4.2"


class TrackingEvent(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    click = "click"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"
    fullscreen = "fullscreen"
    exit_fullscreen = "exitFullscreen"
    player_expand = "playerExpand"
    player_collapse = "playerCollapse"


class Assets57(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns VAST XML")]
    content: Annotated[Optional[str], Field(description="Inline VAST XML content")] = None
    vast_version: Annotated[Optional[VastVersion], Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        Optional[bool], Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        Optional[int], Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        Optional[int], Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        Optional[list[TrackingEvent]], Field(description="Tracking events supported by this VAST tag")
    ] = None


class Assets58(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[Optional[AnyUrl], Field(description="URL endpoint that returns VAST XML")] = None
    content: Annotated[str, Field(description="Inline VAST XML content")]
    vast_version: Annotated[Optional[VastVersion], Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        Optional[bool], Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        Optional[int], Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        Optional[int], Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        Optional[list[TrackingEvent]], Field(description="Tracking events supported by this VAST tag")
    ] = None


class DaastVersion(Enum):
    field_1_0 = "1.0"
    field_1_1 = "1.1"


class TrackingEvent18(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"


class Assets59(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns DAAST XML")]
    content: Annotated[Optional[str], Field(description="Inline DAAST XML content")] = None
    daast_version: Annotated[Optional[DaastVersion], Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        Optional[int], Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        Optional[list[TrackingEvent18]], Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[Optional[bool], Field(description="Whether companion display ads are included")] = None


class Assets60(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[Optional[AnyUrl], Field(description="URL endpoint that returns DAAST XML")] = None
    content: Annotated[str, Field(description="Inline DAAST XML content")]
    daast_version: Annotated[Optional[DaastVersion], Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        Optional[int], Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        Optional[list[TrackingEvent18]], Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[Optional[bool], Field(description="Whether companion display ads are included")] = None


class Colors(BaseModel):
    primary: Optional[str] = None
    secondary: Optional[str] = None
    accent: Optional[str] = None


class Assets61(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["promoted_offerings"]
    url: Annotated[
        Optional[AnyUrl], Field(description="URL of the advertiser's brand or offering (e.g., https://retailer.com)")
    ] = None
    colors: Annotated[Optional[Colors], Field(description="Brand colors")] = None
    fonts: Annotated[Optional[list[str]], Field(description="Brand fonts")] = None
    tone: Annotated[Optional[str], Field(description="Brand tone/voice")] = None


class Assets62(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["url"]
    url: Annotated[AnyUrl, Field(description="URL reference")]
    description: Annotated[Optional[str], Field(description="Description of what this URL points to")] = None


class Input(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="Human-readable name for this preview variant")]
    macros: Annotated[Optional[dict[str, str]], Field(description="Macro values to apply for this preview")] = None
    context_description: Annotated[
        Optional[str], Field(description="Natural language description of the context for AI-generated content")
    ] = None


class Creative(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Unique identifier for the creative")]
    name: Annotated[str, Field(description="Human-readable creative name")]
    format_id: Annotated[Any, Field(description="Circular reference to /schemas/v1/core/format-id.json")]
    assets: Annotated[
        dict[
            str,
            Union[
                Assets,
                Assets51,
                Assets52,
                Assets53,
                Assets54,
                Assets55,
                Assets56,
                Union[Assets57, Assets58],
                Union[Assets59, Assets60],
                Assets61,
                Assets62,
            ],
        ],
        Field(description="Assets required by the format, keyed by asset_role"),
    ]
    inputs: Annotated[
        Optional[list[Input]],
        Field(description="Preview contexts for generative formats - defines what scenarios to generate previews for"),
    ] = None
    tags: Annotated[Optional[list[str]], Field(description="User-defined tags for organization and searchability")] = (
        None
    )
    approved: Annotated[
        Optional[bool],
        Field(
            description="For generative creatives: set to true to approve and finalize, false to request regeneration with updated assets/message. Omit for non-generative creatives."
        ),
    ] = None


class PackageRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buyer_ref: Annotated[str, Field(description="Buyer's reference identifier for this package")]
    product_id: Annotated[str, Field(description="Product ID for this package")]
    format_ids: Annotated[
        Optional[list[FormatId]],
        Field(
            description="Array of format IDs that will be used for this package - must be supported by the product. If omitted, defaults to all formats supported by the product.",
            min_length=1,
        ),
    ] = None
    budget: Annotated[
        float, Field(description="Budget allocation for this package in the media buy's currency", ge=0.0)
    ]
    pacing: Annotated[Optional[Pacing], Field(description="Budget pacing strategy", title="Pacing")] = None
    pricing_option_id: Annotated[
        str, Field(description="ID of the selected pricing option from the product's pricing_options array")
    ]
    bid_price: Annotated[
        Optional[float],
        Field(description="Bid price for auction-based CPM pricing (required if using cpm-auction-option)", ge=0.0),
    ] = None
    targeting_overlay: Annotated[
        Optional[TargetingOverlay],
        Field(
            description="Optional geographic refinements for media buys. Most targeting should be expressed in the brief and handled by the publisher. These fields are primarily for geographic restrictions (RCT testing, regulatory compliance).",
            title="Targeting Overlay",
        ),
    ] = None
    creative_ids: Annotated[
        Optional[list[str]],
        Field(
            description="Creative IDs to assign to this package at creation time (references existing library creatives)"
        ),
    ] = None
    creatives: Annotated[
        Optional[list[Creative]],
        Field(
            description="Full creative objects to upload and assign to this package at creation time (alternative to creative_ids - creatives will be added to library). Supports both static and generative creatives.",
            max_length=100,
        ),
    ] = None
