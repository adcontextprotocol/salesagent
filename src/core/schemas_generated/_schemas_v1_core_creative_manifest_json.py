# generated by datamodel-codegen:
#   filename:  _schemas_v1_core_creative-manifest_json.json
#   timestamp: 2025-10-15T00:10:51+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Literal

from pydantic import AnyUrl, BaseModel, ConfigDict, Field


class FormatId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    agent_url: Annotated[
        AnyUrl,
        Field(
            description="URL of the agent that defines this format (e.g., 'https://creatives.adcontextprotocol.org' for standard formats, or 'https://publisher.com/.well-known/adcp/sales' for custom formats)"
        ),
    ]
    id: Annotated[
        str,
        Field(
            description="Format identifier within the agent's namespace (e.g., 'display_300x250', 'video_standard_30s')",
            pattern="^[a-zA-Z0-9_-]+$",
        ),
    ]


class Format(Enum):
    jpg = "jpg"
    jpeg = "jpeg"
    png = "png"
    gif = "gif"
    webp = "webp"
    svg = "svg"


class Assets(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["image"]
    url: Annotated[AnyUrl, Field(description="URL to hosted image asset")]
    width: Annotated[int, Field(description="Image width in pixels", ge=1)]
    height: Annotated[int, Field(description="Image height in pixels", ge=1)]
    format: Annotated[Format | None, Field(description="Image file format")] = None
    file_size: Annotated[int | None, Field(description="File size in bytes", ge=0)] = None
    alt: Annotated[str | None, Field(description="Alternative text for accessibility")] = None


class Format1(Enum):
    mp4 = "mp4"
    webm = "webm"
    mov = "mov"


class Codec(Enum):
    h264 = "h264"
    h265 = "h265"
    vp8 = "vp8"
    vp9 = "vp9"
    av1 = "av1"


class Assets14(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["video"]
    url: Annotated[AnyUrl, Field(description="URL to hosted video asset")]
    width: Annotated[int, Field(description="Video width in pixels", ge=1)]
    height: Annotated[int, Field(description="Video height in pixels", ge=1)]
    duration_seconds: Annotated[float, Field(description="Video duration in seconds", ge=0.0)]
    format: Annotated[Format1 | None, Field(description="Video container format")] = None
    codec: Annotated[Codec | None, Field(description="Video codec")] = None
    bitrate_mbps: Annotated[float | None, Field(description="Video bitrate in Mbps", ge=0.0)] = None
    file_size: Annotated[int | None, Field(description="File size in bytes", ge=0)] = None
    aspect_ratio: Annotated[
        str | None, Field(description="Aspect ratio (e.g., '16:9', '9:16')", pattern="^\\d+:\\d+$")
    ] = None


class Format2(Enum):
    mp3 = "mp3"
    aac = "aac"
    m4a = "m4a"
    wav = "wav"
    ogg = "ogg"


class Codec1(Enum):
    mp3 = "mp3"
    aac = "aac"
    opus = "opus"
    vorbis = "vorbis"


class SampleRateHz(Enum):
    integer_22050 = 22050
    integer_44100 = 44100
    integer_48000 = 48000
    integer_96000 = 96000


class Channels(Enum):
    mono = "mono"
    stereo = "stereo"
    field_5_1 = "5.1"
    field_7_1 = "7.1"


class Assets15(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["audio"]
    url: Annotated[AnyUrl, Field(description="URL to hosted audio asset")]
    duration_seconds: Annotated[float, Field(description="Audio duration in seconds", ge=0.0)]
    format: Annotated[Format2 | None, Field(description="Audio file format")] = None
    codec: Annotated[Codec1 | None, Field(description="Audio codec")] = None
    bitrate_kbps: Annotated[float | None, Field(description="Audio bitrate in Kbps", ge=0.0)] = None
    sample_rate_hz: Annotated[SampleRateHz | None, Field(description="Sample rate in Hz")] = None
    channels: Annotated[Channels | None, Field(description="Audio channel configuration")] = None
    file_size: Annotated[int | None, Field(description="File size in bytes", ge=0)] = None


class VastVersion(Enum):
    field_2_0 = "2.0"
    field_3_0 = "3.0"
    field_4_0 = "4.0"
    field_4_1 = "4.1"
    field_4_2 = "4.2"


class Assets16(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast_tag"]
    content: Annotated[str, Field(description="Complete VAST XML content")]
    vast_version: Annotated[VastVersion, Field(description="VAST specification version")]
    vpaid_enabled: Annotated[bool | None, Field(description="Whether VPAID is used")] = None
    duration_seconds: Annotated[float | None, Field(description="Expected video duration in seconds", ge=0.0)] = None


class Format3(Enum):
    plain = "plain"
    html = "html"
    markdown = "markdown"


class Assets17(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["text"]
    content: Annotated[str, Field(description="Text content")]
    length: Annotated[int | None, Field(description="Character count", ge=0)] = None
    format: Annotated[Format3 | None, Field(description="Text format")] = "plain"


class Purpose(Enum):
    clickthrough = "clickthrough"
    landing_page = "landing_page"
    tracking_pixel = "tracking_pixel"
    impression_tracker = "impression_tracker"


class Assets18(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["url"]
    url: Annotated[AnyUrl, Field(description="The URL")]
    purpose: Annotated[Purpose | None, Field(description="Purpose of this URL")] = None


class Method(Enum):
    get = "GET"
    post = "POST"


class ResponseType(Enum):
    html = "html"
    json = "json"
    xml = "xml"
    javascript = "javascript"


class Method1(Enum):
    hmac_sha256 = "hmac_sha256"
    api_key = "api_key"
    none = "none"


class Security(BaseModel):
    method: Method1
    hmac_header: str | None = None
    api_key_header: str | None = None


class Assets19(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["webhook"]
    url: Annotated[AnyUrl, Field(description="Webhook URL to call for dynamic content")]
    method: Method | None = "POST"
    timeout_ms: Annotated[int | None, Field(ge=10, le=5000)] = 500
    supported_macros: Annotated[
        list[str] | None, Field(description="Universal macros that can be passed to webhook")
    ] = None
    required_macros: Annotated[list[str] | None, Field(description="Universal macros that must be provided")] = None
    response_type: ResponseType
    security: Security
    fallback_required: bool | None = True


class Assets20(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["html"]
    content: Annotated[str, Field(description="Complete HTML content")]
    url: Annotated[AnyUrl | None, Field(description="URL to externally hosted HTML file")] = None
    width: Annotated[int | None, Field(description="Ad width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Ad height in pixels", ge=1)] = None
    file_size: Annotated[int | None, Field(description="Total file size in bytes", ge=0)] = None


class Assets21(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["html"]
    content: Annotated[str | None, Field(description="Complete HTML content")] = None
    url: Annotated[AnyUrl, Field(description="URL to externally hosted HTML file")]
    width: Annotated[int | None, Field(description="Ad width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Ad height in pixels", ge=1)] = None
    file_size: Annotated[int | None, Field(description="Total file size in bytes", ge=0)] = None


class Assets22(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["javascript"]
    content: Annotated[str, Field(description="JavaScript code content")]
    url: Annotated[AnyUrl | None, Field(description="URL to external JavaScript file")] = None
    inline: Annotated[bool | None, Field(description="Whether code should be inlined vs external script tag")] = None


class Assets23(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["javascript"]
    content: Annotated[str | None, Field(description="JavaScript code content")] = None
    url: Annotated[AnyUrl, Field(description="URL to external JavaScript file")]
    inline: Annotated[bool | None, Field(description="Whether code should be inlined vs external script tag")] = None


class CreativeManifest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    format_id: Annotated[
        FormatId, Field(description="Structured format identifier with agent URL and format name", title="Format ID")
    ]
    promoted_offering: Annotated[
        str | None,
        Field(
            description="Product name or offering being advertised. Maps to promoted_offerings in create_media_buy request to associate creative with the product being promoted."
        ),
    ] = None
    assets: Annotated[
        dict[
            str,
            Assets | Assets14 | Assets15 | Assets16 | Assets17 | Assets18 | Assets19 | Assets20 | Assets21 | Assets22 | Assets23,
        ],
        Field(
            description="Map of asset roles (from format spec) to actual asset content. Each key is an asset_role defined by the format (e.g., 'hero_image', 'logo', 'headline', 'video_file', 'vast_tag')."
        ),
    ]
