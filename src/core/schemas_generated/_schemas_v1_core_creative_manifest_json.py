# generated by datamodel-codegen:
#   filename:  _schemas_v1_core_creative-manifest_json.json
#   source_etag: W/"68f98531-a96"
#   source_last_modified: Thu, 23 Oct 2025 01:30:25 GMT

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, EmailStr, Field


class FormatId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    agent_url: Annotated[
        AnyUrl,
        Field(
            description="URL of the agent that defines this format (e.g., 'https://creatives.adcontextprotocol.org' for standard formats, or 'https://publisher.com/.well-known/adcp/sales' for custom formats)"
        ),
    ]
    id: Annotated[
        str,
        Field(
            description="Format identifier within the agent's namespace (e.g., 'display_300x250', 'video_standard_30s')",
            pattern="^[a-zA-Z0-9_-]+$",
        ),
    ]


class Assets(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl, Field(description="URL to the image asset")]
    width: Annotated[int | None, Field(description="Image width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Image height in pixels", ge=1)] = None
    format: Annotated[str | None, Field(description="Image file format (jpg, png, gif, webp, etc.)")] = None
    alt_text: Annotated[str | None, Field(description="Alternative text for accessibility")] = None


class Assets14(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl, Field(description="URL to the video asset")]
    width: Annotated[int | None, Field(description="Video width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Video height in pixels", ge=1)] = None
    duration_ms: Annotated[int | None, Field(description="Video duration in milliseconds", ge=0)] = None
    format: Annotated[str | None, Field(description="Video file format (mp4, webm, mov, etc.)")] = None
    bitrate_kbps: Annotated[int | None, Field(description="Video bitrate in kilobits per second", ge=1)] = None


class Assets15(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl, Field(description="URL to the audio asset")]
    duration_ms: Annotated[int | None, Field(description="Audio duration in milliseconds", ge=0)] = None
    format: Annotated[str | None, Field(description="Audio file format (mp3, wav, aac, etc.)")] = None
    bitrate_kbps: Annotated[int | None, Field(description="Audio bitrate in kilobits per second", ge=1)] = None


class VastVersion(Enum):
    field_2_0 = "2.0"
    field_3_0 = "3.0"
    field_4_0 = "4.0"
    field_4_1 = "4.1"
    field_4_2 = "4.2"


class TrackingEvent(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    click = "click"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"
    fullscreen = "fullscreen"
    exit_fullscreen = "exitFullscreen"
    player_expand = "playerExpand"
    player_collapse = "playerCollapse"


class Assets16(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns VAST XML")]
    content: Annotated[str | None, Field(description="Inline VAST XML content")] = None
    vast_version: Annotated[VastVersion | None, Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        bool | None, Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent] | None, Field(description="Tracking events supported by this VAST tag")
    ] = None


class Assets17(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl | None, Field(description="URL endpoint that returns VAST XML")] = None
    content: Annotated[str, Field(description="Inline VAST XML content")]
    vast_version: Annotated[VastVersion | None, Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        bool | None, Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent] | None, Field(description="Tracking events supported by this VAST tag")
    ] = None


class Assets18(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    content: Annotated[str, Field(description="Text content")]
    language: Annotated[str | None, Field(description="Language code (e.g., 'en', 'es', 'fr')")] = None


class UrlType(Enum):
    clickthrough = "clickthrough"
    tracker_pixel = "tracker_pixel"
    tracker_script = "tracker_script"


class Assets19(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl, Field(description="URL reference")]
    url_type: Annotated[
        UrlType | None,
        Field(
            description="Type of URL asset: 'clickthrough' for user click destination (landing page), 'tracker_pixel' for impression/event tracking via HTTP request (fires GET, expects pixel/204 response), 'tracker_script' for measurement SDKs that must load as <script> tag (OMID verification, native event trackers using method:2)"
        ),
    ] = None
    description: Annotated[str | None, Field(description="Description of what this URL points to")] = None


class Assets20(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    content: Annotated[str, Field(description="HTML content")]
    version: Annotated[str | None, Field(description="HTML version (e.g., 'HTML5')")] = None


class ModuleType(Enum):
    esm = "esm"
    commonjs = "commonjs"
    script = "script"


class Assets21(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    content: Annotated[str, Field(description="JavaScript content")]
    module_type: Annotated[ModuleType | None, Field(description="JavaScript module type")] = None


class Method(Enum):
    get = "GET"
    post = "POST"


class ResponseType(Enum):
    html = "html"
    json = "json"
    xml = "xml"
    javascript = "javascript"


class Method3(Enum):
    hmac_sha256 = "hmac_sha256"
    api_key = "api_key"
    none = "none"


class Security(BaseModel):
    method: Annotated[Method3, Field(description="Authentication method")]
    hmac_header: Annotated[str | None, Field(description="Header name for HMAC signature (e.g., 'X-Signature')")] = None
    api_key_header: Annotated[str | None, Field(description="Header name for API key (e.g., 'X-API-Key')")] = None


class Assets22(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl, Field(description="Webhook URL to call for dynamic content")]
    method: Annotated[Method | None, Field(description="HTTP method")] = "POST"
    timeout_ms: Annotated[
        int | None, Field(description="Maximum time to wait for response in milliseconds", ge=10, le=5000)
    ] = 500
    supported_macros: Annotated[
        list[str] | None,
        Field(description="Universal macros that can be passed to webhook (e.g., {DEVICE_TYPE}, {COUNTRY})"),
    ] = None
    required_macros: Annotated[
        list[str] | None, Field(description="Universal macros that must be provided for webhook to function")
    ] = None
    response_type: Annotated[ResponseType, Field(description="Expected content type of webhook response")]
    security: Annotated[Security, Field(description="Security configuration for webhook calls")]


class Assets23(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    content: Annotated[str, Field(description="CSS content")]
    media: Annotated[str | None, Field(description="CSS media query context (e.g., 'screen', 'print')")] = None


class DaastVersion(Enum):
    field_1_0 = "1.0"
    field_1_1 = "1.1"


class TrackingEvent10(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"


class Assets24(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns DAAST XML")]
    content: Annotated[str | None, Field(description="Inline DAAST XML content")] = None
    daast_version: Annotated[DaastVersion | None, Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent10] | None, Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[bool | None, Field(description="Whether companion display ads are included")] = None


class Assets25(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl | None, Field(description="URL endpoint that returns DAAST XML")] = None
    content: Annotated[str, Field(description="Inline DAAST XML content")]
    daast_version: Annotated[DaastVersion | None, Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent10] | None, Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[bool | None, Field(description="Whether companion display ads are included")] = None


class Logo(BaseModel):
    url: Annotated[AnyUrl, Field(description="URL to the logo asset")]
    tags: Annotated[
        list[str] | None,
        Field(
            description="Semantic tags describing the logo variant (e.g., 'dark', 'light', 'square', 'horizontal', 'icon')"
        ),
    ] = None
    width: Annotated[int | None, Field(description="Logo width in pixels")] = None
    height: Annotated[int | None, Field(description="Logo height in pixels")] = None


class Colors(BaseModel):
    primary: Annotated[
        str | None, Field(description="Primary brand color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    secondary: Annotated[
        str | None, Field(description="Secondary brand color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    accent: Annotated[str | None, Field(description="Accent color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")] = None
    background: Annotated[
        str | None, Field(description="Background color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    text: Annotated[str | None, Field(description="Text color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")] = None


class Fonts(BaseModel):
    primary: Annotated[str | None, Field(description="Primary font family name")] = None
    secondary: Annotated[str | None, Field(description="Secondary font family name")] = None
    font_urls: Annotated[list[AnyUrl] | None, Field(description="URLs to web font files if using custom fonts")] = None


class AssetType(Enum):
    image = "image"
    video = "video"
    audio = "audio"
    text = "text"


class Asset(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[str, Field(description="Unique identifier for this asset")]
    asset_type: Annotated[AssetType, Field(description="Type of asset")]
    url: Annotated[AnyUrl, Field(description="URL to CDN-hosted asset file")]
    tags: Annotated[
        list[str] | None, Field(description="Tags for asset discovery (e.g., 'holiday', 'lifestyle', 'product_shot')")
    ] = None
    name: Annotated[str | None, Field(description="Human-readable asset name")] = None
    description: Annotated[str | None, Field(description="Asset description or usage notes")] = None
    width: Annotated[int | None, Field(description="Image/video width in pixels")] = None
    height: Annotated[int | None, Field(description="Image/video height in pixels")] = None
    duration_seconds: Annotated[float | None, Field(description="Video/audio duration in seconds")] = None
    file_size_bytes: Annotated[int | None, Field(description="File size in bytes")] = None
    format: Annotated[str | None, Field(description="File format (e.g., 'jpg', 'mp4', 'mp3')")] = None
    metadata: Annotated[dict[str, Any] | None, Field(description="Additional asset-specific metadata")] = None


class FeedFormat(Enum):
    google_merchant_center = "google_merchant_center"
    facebook_catalog = "facebook_catalog"
    custom = "custom"


class UpdateFrequency(Enum):
    realtime = "realtime"
    hourly = "hourly"
    daily = "daily"
    weekly = "weekly"


class ProductCatalog(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    feed_url: Annotated[AnyUrl, Field(description="URL to product catalog feed")]
    feed_format: Annotated[FeedFormat | None, Field(description="Format of the product feed")] = (
        "google_merchant_center"
    )
    categories: Annotated[
        list[str] | None, Field(description="Product categories available in the catalog (for filtering)")
    ] = None
    last_updated: Annotated[AwareDatetime | None, Field(description="When the product catalog was last updated")] = None
    update_frequency: Annotated[
        UpdateFrequency | None, Field(description="How frequently the product catalog is updated")
    ] = None


class Disclaimer(BaseModel):
    text: Annotated[str, Field(description="Disclaimer text")]
    context: Annotated[
        str | None,
        Field(description="When this disclaimer applies (e.g., 'financial_products', 'health_claims', 'all')"),
    ] = None
    required: Annotated[bool | None, Field(description="Whether this disclaimer must appear")] = True


class Contact(BaseModel):
    email: Annotated[EmailStr | None, Field(description="Contact email")] = None
    phone: Annotated[str | None, Field(description="Contact phone number")] = None


class Metadata(BaseModel):
    created_date: Annotated[AwareDatetime | None, Field(description="When this brand manifest was created")] = None
    updated_date: Annotated[AwareDatetime | None, Field(description="When this brand manifest was last updated")] = None
    version: Annotated[str | None, Field(description="Brand card version number")] = None


class BrandManifest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl,
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ]
    name: Annotated[str | None, Field(description="Brand or business name")] = None
    logos: Annotated[
        list[Logo] | None, Field(description="Brand logo assets with semantic tags for different use cases")
    ] = None
    colors: Annotated[Colors | None, Field(description="Brand color palette")] = None
    fonts: Annotated[Fonts | None, Field(description="Brand typography guidelines")] = None
    tone: Annotated[
        str | None,
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[str | None, Field(description="Brand tagline or slogan")] = None
    assets: Annotated[
        list[Asset] | None,
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        ProductCatalog | None,
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        list[Disclaimer] | None, Field(description="Legal disclaimers or required text that must appear in creatives")
    ] = None
    industry: Annotated[
        str | None, Field(description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')")
    ] = None
    target_audience: Annotated[str | None, Field(description="Primary target audience description")] = None
    contact: Annotated[Contact | None, Field(description="Brand contact information")] = None
    metadata: Annotated[Metadata | None, Field(description="Additional brand metadata")] = None


class Asset7(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[str, Field(description="Unique identifier for this asset")]
    asset_type: Annotated[AssetType, Field(description="Type of asset")]
    url: Annotated[AnyUrl, Field(description="URL to CDN-hosted asset file")]
    tags: Annotated[
        list[str] | None, Field(description="Tags for asset discovery (e.g., 'holiday', 'lifestyle', 'product_shot')")
    ] = None
    name: Annotated[str | None, Field(description="Human-readable asset name")] = None
    description: Annotated[str | None, Field(description="Asset description or usage notes")] = None
    width: Annotated[int | None, Field(description="Image/video width in pixels")] = None
    height: Annotated[int | None, Field(description="Image/video height in pixels")] = None
    duration_seconds: Annotated[float | None, Field(description="Video/audio duration in seconds")] = None
    file_size_bytes: Annotated[int | None, Field(description="File size in bytes")] = None
    format: Annotated[str | None, Field(description="File format (e.g., 'jpg', 'mp4', 'mp3')")] = None
    metadata: Annotated[dict[str, Any] | None, Field(description="Additional asset-specific metadata")] = None


class ProductCatalog7(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    feed_url: Annotated[AnyUrl, Field(description="URL to product catalog feed")]
    feed_format: Annotated[FeedFormat | None, Field(description="Format of the product feed")] = (
        "google_merchant_center"
    )
    categories: Annotated[
        list[str] | None, Field(description="Product categories available in the catalog (for filtering)")
    ] = None
    last_updated: Annotated[AwareDatetime | None, Field(description="When the product catalog was last updated")] = None
    update_frequency: Annotated[
        UpdateFrequency | None, Field(description="How frequently the product catalog is updated")
    ] = None


class BrandManifest6(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl | None,
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ] = None
    name: Annotated[str, Field(description="Brand or business name")]
    logos: Annotated[
        list[Logo] | None, Field(description="Brand logo assets with semantic tags for different use cases")
    ] = None
    colors: Annotated[Colors | None, Field(description="Brand color palette")] = None
    fonts: Annotated[Fonts | None, Field(description="Brand typography guidelines")] = None
    tone: Annotated[
        str | None,
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[str | None, Field(description="Brand tagline or slogan")] = None
    assets: Annotated[
        list[Asset7] | None,
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        ProductCatalog7 | None,
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        list[Disclaimer] | None, Field(description="Legal disclaimers or required text that must appear in creatives")
    ] = None
    industry: Annotated[
        str | None, Field(description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')")
    ] = None
    target_audience: Annotated[str | None, Field(description="Primary target audience description")] = None
    contact: Annotated[Contact | None, Field(description="Brand contact information")] = None
    metadata: Annotated[Metadata | None, Field(description="Additional brand metadata")] = None


class ProductSelectors(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    manifest_skus: Annotated[
        list[str] | None, Field(description="Direct product SKU references from the brand manifest product catalog")
    ] = None
    manifest_tags: Annotated[
        list[str] | None,
        Field(
            description="Select products by tags from the brand manifest product catalog (e.g., 'organic', 'sauces', 'holiday')"
        ),
    ] = None
    manifest_category: Annotated[
        str | None,
        Field(
            description="Select products from a specific category in the brand manifest product catalog (e.g., 'beverages/soft-drinks', 'food/sauces')"
        ),
    ] = None
    manifest_query: Annotated[
        str | None,
        Field(
            description="Natural language query to select products from the brand manifest (e.g., 'all Kraft Heinz pasta sauces', 'organic products under $20')"
        ),
    ] = None


class Offering(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="Offering name (e.g., 'Winter Sale', 'New Product Launch')")]
    description: Annotated[str | None, Field(description="Description of what's being offered")] = None
    assets: Annotated[list[dict[str, Any]] | None, Field(description="Assets specific to this offering")] = None


class AssetType9(Enum):
    image = "image"
    video = "video"
    audio = "audio"
    vast = "vast"
    daast = "daast"
    text = "text"
    url = "url"
    html = "html"
    css = "css"
    javascript = "javascript"
    webhook = "webhook"


class AssetSelectors(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    tags: Annotated[
        list[str] | None, Field(description="Select assets with specific tags (e.g., ['holiday', 'premium'])")
    ] = None
    asset_types: Annotated[
        list[AssetType9] | None, Field(description="Filter by asset type (e.g., ['image', 'video'])")
    ] = None
    exclude_tags: Annotated[list[str] | None, Field(description="Exclude assets with these tags")] = None


class Assets26(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    brand_manifest: Annotated[
        BrandManifest | BrandManifest6 | AnyUrl,
        Field(
            description="Brand manifest provided either as an inline object or a URL string pointing to a hosted manifest",
            examples=[
                {
                    "description": "Inline brand manifest",
                    "data": {
                        "url": "https://acmecorp.com",
                        "name": "ACME Corporation",
                        "colors": {"primary": "#FF6B35"},
                    },
                },
                {
                    "description": "URL string reference to hosted manifest",
                    "data": "https://cdn.acmecorp.com/brand-manifest.json",
                },
            ],
            title="Brand Manifest Reference",
        ),
    ]
    product_selectors: Annotated[
        ProductSelectors | None,
        Field(
            description="Specification of products or offerings being promoted in a campaign. Supports multiple selection methods from the brand manifest that can be combined using UNION (OR) logic. When multiple selection methods are provided, products matching ANY of the criteria are selected (logical OR, not AND).",
            examples=[
                {
                    "description": "Direct SKU selection for specific products from brand manifest",
                    "data": {"manifest_skus": ["SKU-12345", "SKU-67890"]},
                },
                {
                    "description": "UNION selection: products tagged 'organic' OR 'sauces' OR in 'food/condiments' category from brand manifest",
                    "data": {"manifest_tags": ["organic", "sauces"], "manifest_category": "food/condiments"},
                },
                {
                    "description": "Natural language product selection from brand manifest",
                    "data": {"manifest_query": "all Kraft Heinz pasta sauces under $5"},
                },
                {"description": "Select products by tags", "data": {"manifest_tags": ["holiday"]}},
            ],
            title="Promoted Products",
        ),
    ] = None
    offerings: Annotated[
        list[Offering] | None,
        Field(
            description="Inline offerings for campaigns without a product catalog. Each offering has a name, description, and associated assets."
        ),
    ] = None
    asset_selectors: Annotated[
        AssetSelectors | None, Field(description="Selectors to choose specific assets from the brand manifest")
    ] = None


class CreativeManifest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    format_id: Annotated[
        FormatId, Field(description="Structured format identifier with agent URL and format name", title="Format ID")
    ]
    promoted_offering: Annotated[
        str | None,
        Field(
            description="Product name or offering being advertised. Maps to promoted_offerings in create_media_buy request to associate creative with the product being promoted."
        ),
    ] = None
    assets: Annotated[
        dict[
            str,
            Assets
            | Assets14
            | Assets15
            | Assets16
            | Assets17
            | Assets18
            | Assets19
            | Assets20
            | Assets21
            | Assets22
            | Assets23
            | Assets24
            | Assets25
            | Assets26,
        ],
        Field(
            description="Map of asset IDs to actual asset content. Each key MUST match an asset_id from the format's assets_required array (e.g., 'banner_image', 'clickthrough_url', 'video_file', 'vast_tag'). The asset_id is the technical identifier used to match assets to format requirements.\n\nIMPORTANT: Creative manifest validation MUST be performed in the context of the format specification. The format defines what type each asset_id should be, which eliminates any validation ambiguity."
        ),
    ]
