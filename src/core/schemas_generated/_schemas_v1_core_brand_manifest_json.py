# generated by datamodel-codegen:
#   filename:  _schemas_v1_core_brand-manifest_json.json
#   source_etag: W/"68f9296c-2cb0"
#   source_last_modified: Wed, 22 Oct 2025 18:58:52 GMT

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, EmailStr, Field, RootModel


class Logo(BaseModel):
    url: Annotated[AnyUrl, Field(description="URL to the logo asset")]
    tags: Annotated[
        list[str] | None,
        Field(
            description="Semantic tags describing the logo variant (e.g., 'dark', 'light', 'square', 'horizontal', 'icon')"
        ),
    ] = None
    width: Annotated[int | None, Field(description="Logo width in pixels")] = None
    height: Annotated[int | None, Field(description="Logo height in pixels")] = None


class Colors(BaseModel):
    primary: Annotated[
        str | None, Field(description="Primary brand color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    secondary: Annotated[
        str | None, Field(description="Secondary brand color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    accent: Annotated[str | None, Field(description="Accent color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")] = None
    background: Annotated[
        str | None, Field(description="Background color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    text: Annotated[str | None, Field(description="Text color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")] = None


class Fonts(BaseModel):
    primary: Annotated[str | None, Field(description="Primary font family name")] = None
    secondary: Annotated[str | None, Field(description="Secondary font family name")] = None
    font_urls: Annotated[list[AnyUrl] | None, Field(description="URLs to web font files if using custom fonts")] = None


class AssetType(Enum):
    image = "image"
    video = "video"
    audio = "audio"
    text = "text"


class Asset(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[str, Field(description="Unique identifier for this asset")]
    asset_type: Annotated[AssetType, Field(description="Type of asset")]
    url: Annotated[AnyUrl, Field(description="URL to CDN-hosted asset file")]
    tags: Annotated[
        list[str] | None, Field(description="Tags for asset discovery (e.g., 'holiday', 'lifestyle', 'product_shot')")
    ] = None
    name: Annotated[str | None, Field(description="Human-readable asset name")] = None
    description: Annotated[str | None, Field(description="Asset description or usage notes")] = None
    width: Annotated[int | None, Field(description="Image/video width in pixels")] = None
    height: Annotated[int | None, Field(description="Image/video height in pixels")] = None
    duration_seconds: Annotated[float | None, Field(description="Video/audio duration in seconds")] = None
    file_size_bytes: Annotated[int | None, Field(description="File size in bytes")] = None
    format: Annotated[str | None, Field(description="File format (e.g., 'jpg', 'mp4', 'mp3')")] = None
    metadata: Annotated[dict[str, Any] | None, Field(description="Additional asset-specific metadata")] = None


class FeedFormat(Enum):
    google_merchant_center = "google_merchant_center"
    facebook_catalog = "facebook_catalog"
    custom = "custom"


class UpdateFrequency(Enum):
    realtime = "realtime"
    hourly = "hourly"
    daily = "daily"
    weekly = "weekly"


class ProductCatalog(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    feed_url: Annotated[AnyUrl, Field(description="URL to product catalog feed")]
    feed_format: Annotated[FeedFormat | None, Field(description="Format of the product feed")] = (
        "google_merchant_center"
    )
    categories: Annotated[
        list[str] | None, Field(description="Product categories available in the catalog (for filtering)")
    ] = None
    last_updated: Annotated[AwareDatetime | None, Field(description="When the product catalog was last updated")] = None
    update_frequency: Annotated[
        UpdateFrequency | None, Field(description="How frequently the product catalog is updated")
    ] = None


class Disclaimer(BaseModel):
    text: Annotated[str, Field(description="Disclaimer text")]
    context: Annotated[
        str | None,
        Field(description="When this disclaimer applies (e.g., 'financial_products', 'health_claims', 'all')"),
    ] = None
    required: Annotated[bool | None, Field(description="Whether this disclaimer must appear")] = True


class Contact(BaseModel):
    email: Annotated[EmailStr | None, Field(description="Contact email")] = None
    phone: Annotated[str | None, Field(description="Contact phone number")] = None


class Metadata(BaseModel):
    created_date: Annotated[AwareDatetime | None, Field(description="When this brand manifest was created")] = None
    updated_date: Annotated[AwareDatetime | None, Field(description="When this brand manifest was last updated")] = None
    version: Annotated[str | None, Field(description="Brand card version number")] = None


class BrandManifest1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl,
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ]
    name: Annotated[str | None, Field(description="Brand or business name")] = None
    logos: Annotated[
        list[Logo] | None, Field(description="Brand logo assets with semantic tags for different use cases")
    ] = None
    colors: Annotated[Colors | None, Field(description="Brand color palette")] = None
    fonts: Annotated[Fonts | None, Field(description="Brand typography guidelines")] = None
    tone: Annotated[
        str | None,
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[str | None, Field(description="Brand tagline or slogan")] = None
    assets: Annotated[
        list[Asset] | None,
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        ProductCatalog | None,
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        list[Disclaimer] | None, Field(description="Legal disclaimers or required text that must appear in creatives")
    ] = None
    industry: Annotated[
        str | None, Field(description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')")
    ] = None
    target_audience: Annotated[str | None, Field(description="Primary target audience description")] = None
    contact: Annotated[Contact | None, Field(description="Brand contact information")] = None
    metadata: Annotated[Metadata | None, Field(description="Additional brand metadata")] = None


class Asset3(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[str, Field(description="Unique identifier for this asset")]
    asset_type: Annotated[AssetType, Field(description="Type of asset")]
    url: Annotated[AnyUrl, Field(description="URL to CDN-hosted asset file")]
    tags: Annotated[
        list[str] | None, Field(description="Tags for asset discovery (e.g., 'holiday', 'lifestyle', 'product_shot')")
    ] = None
    name: Annotated[str | None, Field(description="Human-readable asset name")] = None
    description: Annotated[str | None, Field(description="Asset description or usage notes")] = None
    width: Annotated[int | None, Field(description="Image/video width in pixels")] = None
    height: Annotated[int | None, Field(description="Image/video height in pixels")] = None
    duration_seconds: Annotated[float | None, Field(description="Video/audio duration in seconds")] = None
    file_size_bytes: Annotated[int | None, Field(description="File size in bytes")] = None
    format: Annotated[str | None, Field(description="File format (e.g., 'jpg', 'mp4', 'mp3')")] = None
    metadata: Annotated[dict[str, Any] | None, Field(description="Additional asset-specific metadata")] = None


class ProductCatalog3(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    feed_url: Annotated[AnyUrl, Field(description="URL to product catalog feed")]
    feed_format: Annotated[FeedFormat | None, Field(description="Format of the product feed")] = (
        "google_merchant_center"
    )
    categories: Annotated[
        list[str] | None, Field(description="Product categories available in the catalog (for filtering)")
    ] = None
    last_updated: Annotated[AwareDatetime | None, Field(description="When the product catalog was last updated")] = None
    update_frequency: Annotated[
        UpdateFrequency | None, Field(description="How frequently the product catalog is updated")
    ] = None


class BrandManifest2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl | None,
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ] = None
    name: Annotated[str, Field(description="Brand or business name")]
    logos: Annotated[
        list[Logo] | None, Field(description="Brand logo assets with semantic tags for different use cases")
    ] = None
    colors: Annotated[Colors | None, Field(description="Brand color palette")] = None
    fonts: Annotated[Fonts | None, Field(description="Brand typography guidelines")] = None
    tone: Annotated[
        str | None,
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[str | None, Field(description="Brand tagline or slogan")] = None
    assets: Annotated[
        list[Asset3] | None,
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        ProductCatalog3 | None,
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        list[Disclaimer] | None, Field(description="Legal disclaimers or required text that must appear in creatives")
    ] = None
    industry: Annotated[
        str | None, Field(description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')")
    ] = None
    target_audience: Annotated[str | None, Field(description="Primary target audience description")] = None
    contact: Annotated[Contact | None, Field(description="Brand contact information")] = None
    metadata: Annotated[Metadata | None, Field(description="Additional brand metadata")] = None


class BrandManifest(RootModel[BrandManifest1 | BrandManifest2]):
    root: Annotated[
        BrandManifest1 | BrandManifest2,
        Field(
            description="Standardized brand information manifest for creative generation and media buying. Enables low-friction creative workflows by providing brand context that can be easily cached and shared across requests.",
            examples=[
                {
                    "description": "Example with both URL and name",
                    "data": {"url": "https://bobsfunburgers.com", "name": "Bob's Fun Burgers"},
                },
                {
                    "description": "Example: white-label brand without dedicated URL",
                    "data": {
                        "name": "Great Value",
                        "colors": {"primary": "#0071CE", "secondary": "#FFC220"},
                        "tone": "affordable and trustworthy",
                    },
                },
                {
                    "description": "Full brand manifest with all fields",
                    "data": {
                        "url": "https://acmecorp.com",
                        "name": "ACME Corporation",
                        "logos": [
                            {
                                "url": "https://cdn.acmecorp.com/logo-square-dark.png",
                                "tags": ["dark", "square"],
                                "width": 512,
                                "height": 512,
                            },
                            {
                                "url": "https://cdn.acmecorp.com/logo-horizontal-light.png",
                                "tags": ["light", "horizontal"],
                                "width": 1200,
                                "height": 400,
                            },
                        ],
                        "colors": {
                            "primary": "#FF6B35",
                            "secondary": "#004E89",
                            "accent": "#F7931E",
                            "background": "#FFFFFF",
                            "text": "#1A1A1A",
                        },
                        "fonts": {"primary": "Helvetica Neue", "secondary": "Georgia"},
                        "tone": "professional and trustworthy",
                        "tagline": "Innovation You Can Trust",
                        "assets": [
                            {
                                "asset_id": "hero_winter_2024",
                                "asset_type": "image",
                                "url": "https://cdn.acmecorp.com/hero-winter-2024.jpg",
                                "tags": ["hero", "winter", "holiday", "lifestyle"],
                                "name": "Winter Campaign Hero",
                                "width": 1920,
                                "height": 1080,
                                "format": "jpg",
                            },
                            {
                                "asset_id": "product_video_30s",
                                "asset_type": "video",
                                "url": "https://cdn.acmecorp.com/product-demo-30s.mp4",
                                "tags": ["product", "demo", "30s"],
                                "name": "Product Demo 30 Second",
                                "width": 1920,
                                "height": 1080,
                                "duration_seconds": 30,
                                "format": "mp4",
                            },
                        ],
                        "product_catalog": {
                            "feed_url": "https://acmecorp.com/products.xml",
                            "feed_format": "google_merchant_center",
                            "categories": ["electronics/computers", "electronics/accessories"],
                            "last_updated": "2024-03-15T10:00:00Z",
                            "update_frequency": "hourly",
                        },
                        "disclaimers": [
                            {
                                "text": "Results may vary. Consult a professional before use.",
                                "context": "health_claims",
                                "required": True,
                            }
                        ],
                        "industry": "technology",
                        "target_audience": "business decision-makers aged 35-55",
                    },
                },
            ],
            title="Brand Manifest",
        ),
    ]
