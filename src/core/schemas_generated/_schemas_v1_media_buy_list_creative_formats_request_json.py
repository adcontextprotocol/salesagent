# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_list-creative-formats-request_json.json
#   timestamp: 2025-10-13T04:58:05+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated

from pydantic import BaseModel, ConfigDict, Field


class Type(Enum):
    audio = "audio"
    video = "video"
    display = "display"
    dooh = "dooh"


class AssetType(Enum):
    image = "image"
    video = "video"
    audio = "audio"
    text = "text"
    html = "html"
    javascript = "javascript"
    url = "url"


class ListCreativeFormatsRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    adcp_version: Annotated[
        str | None, Field(description="AdCP schema version for this request", pattern="^\\d+\\.\\d+\\.\\d+$")
    ] = "1.6.0"
    format_ids: Annotated[
        list[str] | None,
        Field(description="Return only these specific format IDs (e.g., from get_products response)"),
    ] = None
    type: Annotated[
        Type | None, Field(description="Filter by format type (technical categories with distinct requirements)")
    ] = None
    asset_types: Annotated[
        list[AssetType] | None,
        Field(
            description="Filter to formats that include these asset types. For third-party tags, search for 'html' or 'javascript'. E.g., ['image', 'text'] returns formats with images and text, ['javascript'] returns formats accepting JavaScript tags."
        ),
    ] = None
    dimensions: Annotated[
        str | None,
        Field(
            description="Filter to formats with specific dimensions (e.g., '300x250', '728x90'). Useful with asset_types to find specific sizes like '300x250 JavaScript'"
        ),
    ] = None
    name_search: Annotated[
        str | None, Field(description="Search for formats by name (case-insensitive partial match)")
    ] = None
