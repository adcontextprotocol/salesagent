# generated by datamodel-codegen:
#   filename:  _schemas_v1_core_protocol-envelope_json.json
#   source_etag: W/"68f98531-17cf"
#   source_last_modified: Thu, 23 Oct 2025 01:30:25 GMT

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field


class Status(Enum):
    submitted = "submitted"
    working = "working"
    input_required = "input-required"
    completed = "completed"
    canceled = "canceled"
    failed = "failed"
    rejected = "rejected"
    auth_required = "auth-required"
    unknown = "unknown"


class Scheme(Enum):
    bearer = "Bearer"
    hmac_sha256 = "HMAC-SHA256"


class Authentication(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    schemes: Annotated[
        list[Scheme],
        Field(
            description="Array of authentication schemes. Supported: ['Bearer'] for simple token auth, ['HMAC-SHA256'] for signature verification (recommended for production)",
            max_length=1,
            min_length=1,
        ),
    ]
    credentials: Annotated[
        str,
        Field(
            description="Credentials for authentication. For Bearer: token sent in Authorization header. For HMAC-SHA256: shared secret used to generate signature. Minimum 32 characters. Exchanged out-of-band during onboarding.",
            min_length=32,
        ),
    ]


class PushNotificationConfig(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl, Field(description="Webhook endpoint URL for task status notifications")]
    token: Annotated[
        str | None,
        Field(
            description="Optional client-provided token for webhook validation. Echoed back in webhook payload to validate request authenticity.",
            min_length=16,
        ),
    ] = None
    authentication: Annotated[
        Authentication, Field(description="Authentication configuration for webhook delivery (A2A-compatible)")
    ]


class ProtocolEnvelope(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    context_id: Annotated[
        str | None,
        Field(
            description="Session/conversation identifier for tracking related operations across multiple task invocations. Managed by the protocol layer to maintain conversational context."
        ),
    ] = None
    task_id: Annotated[
        str | None,
        Field(
            description="Unique identifier for tracking asynchronous operations. Present when a task requires extended processing time. Used to query task status and retrieve results when complete."
        ),
    ] = None
    status: Annotated[
        Status,
        Field(
            description="Standardized task status values based on A2A TaskState enum. Indicates the current state of any AdCP operation.",
            title="Task Status",
        ),
    ]
    message: Annotated[
        str | None,
        Field(
            description="Human-readable summary of the task result. Provides natural language explanation of what happened, suitable for display to end users or for AI agent comprehension. Generated by the protocol layer based on the task response."
        ),
    ] = None
    timestamp: Annotated[
        AwareDatetime | None,
        Field(
            description="ISO 8601 timestamp when the response was generated. Useful for debugging, logging, cache validation, and tracking async operation progress."
        ),
    ] = None
    push_notification_config: Annotated[
        PushNotificationConfig | None,
        Field(
            description="Webhook configuration for asynchronous task notifications. Uses A2A-compatible PushNotificationConfig structure. Supports Bearer tokens (simple) or HMAC signatures (production-recommended).",
            title="Push Notification Config",
        ),
    ] = None
    payload: Annotated[
        dict[str, Any],
        Field(
            description="The actual task-specific response data. This is the content defined in individual task response schemas (e.g., get-products-response.json, create-media-buy-response.json). Contains only domain-specific data without protocol-level fields."
        ),
    ]
