# generated by datamodel-codegen:
#   filename:  _schemas_v1_signals_get-signals-request_json.json
#   source_etag: W/"68f98531-c03"
#   source_last_modified: Thu, 23 Oct 2025 01:30:25 GMT

from __future__ import annotations

from enum import Enum
from typing import Annotated

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Account(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    platform: Annotated[str, Field(description="Platform identifier")]
    account: Annotated[str, Field(description="Account identifier on that platform")]


class Country(RootModel[str]):
    root: Annotated[str, Field(pattern="^[A-Z]{2}$")]


class DeliverTo(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    platforms: Annotated[str | list[str], Field(description="Target platforms for signal deployment")]
    accounts: Annotated[list[Account] | None, Field(description="Specific platform-account combinations")] = None
    countries: Annotated[list[Country], Field(description="Countries where signals will be used (ISO codes)")]


class CatalogType(Enum):
    marketplace = "marketplace"
    custom = "custom"
    owned = "owned"


class Filters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    catalog_types: Annotated[list[CatalogType] | None, Field(description="Filter by catalog type")] = None
    data_providers: Annotated[list[str] | None, Field(description="Filter by specific data providers")] = None
    max_cpm: Annotated[float | None, Field(description="Maximum CPM price filter", ge=0.0)] = None
    min_coverage_percentage: Annotated[
        float | None, Field(description="Minimum coverage requirement", ge=0.0, le=100.0)
    ] = None


class GetSignalsRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    signal_spec: Annotated[str, Field(description="Natural language description of the desired signals")]
    deliver_to: Annotated[DeliverTo, Field(description="Where the signals need to be delivered")]
    filters: Annotated[Filters | None, Field(description="Filters to refine results")] = None
    max_results: Annotated[int | None, Field(description="Maximum number of results to return", ge=1)] = None
