# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_create-media-buy-request_json.json
#   timestamp: 2025-10-15T00:10:51+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Literal, Union

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, EmailStr, Field, RootModel


class Pacing(Enum):
    even = "even"
    asap = "asap"
    front_loaded = "front_loaded"


class GeoCountryAnyOfItem(RootModel[str]):
    root: Annotated[str, Field(pattern="^[A-Z]{2}$")]


class FrequencyCap(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    suppress_minutes: Annotated[float, Field(description="Minutes to suppress after impression", ge=0.0)]


class TargetingOverlay(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    geo_country_any_of: Annotated[
        list[GeoCountryAnyOfItem] | None,
        Field(
            description="Restrict delivery to specific countries (ISO codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_region_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific regions/states. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_metro_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific metro areas (DMA codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_postal_code_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific postal/ZIP codes. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    frequency_cap: Annotated[
        FrequencyCap | None,
        Field(description="Frequency capping settings for package-level application", title="Frequency Cap"),
    ] = None


class FormatId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    agent_url: Annotated[
        AnyUrl,
        Field(
            description="URL of the agent that defines this format (e.g., 'https://creatives.adcontextprotocol.org' for standard formats, or 'https://publisher.com/.well-known/adcp/sales' for custom formats)"
        ),
    ]
    id: Annotated[
        str,
        Field(
            description="Format identifier within the agent's namespace (e.g., 'display_300x250', 'video_standard_30s')",
            pattern="^[a-zA-Z0-9_-]+$",
        ),
    ]


class Assets(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["image"]
    url: Annotated[AnyUrl, Field(description="URL to the image asset")]
    width: Annotated[int | None, Field(description="Image width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Image height in pixels", ge=1)] = None
    format: Annotated[str | None, Field(description="Image file format (jpg, png, gif, webp, etc.)")] = None
    alt_text: Annotated[str | None, Field(description="Alternative text for accessibility")] = None


class Assets25(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["video"]
    url: Annotated[AnyUrl, Field(description="URL to the video asset")]
    width: Annotated[int | None, Field(description="Video width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Video height in pixels", ge=1)] = None
    duration_ms: Annotated[int | None, Field(description="Video duration in milliseconds", ge=0)] = None
    format: Annotated[str | None, Field(description="Video file format (mp4, webm, mov, etc.)")] = None
    bitrate_kbps: Annotated[int | None, Field(description="Video bitrate in kilobits per second", ge=1)] = None


class Assets26(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["audio"]
    url: Annotated[AnyUrl, Field(description="URL to the audio asset")]
    duration_ms: Annotated[int | None, Field(description="Audio duration in milliseconds", ge=0)] = None
    format: Annotated[str | None, Field(description="Audio file format (mp3, wav, aac, etc.)")] = None
    bitrate_kbps: Annotated[int | None, Field(description="Audio bitrate in kilobits per second", ge=1)] = None


class Assets27(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["text"]
    content: Annotated[str, Field(description="Text content")]
    max_length: Annotated[int | None, Field(description="Maximum character length constraint", ge=1)] = None
    language: Annotated[str | None, Field(description="Language code (e.g., 'en', 'es', 'fr')")] = None


class Assets28(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["html"]
    content: Annotated[str, Field(description="HTML content")]
    version: Annotated[str | None, Field(description="HTML version (e.g., 'HTML5')")] = None


class Assets29(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["css"]
    content: Annotated[str, Field(description="CSS content")]
    media: Annotated[str | None, Field(description="CSS media query context (e.g., 'screen', 'print')")] = None


class ModuleType(Enum):
    esm = "esm"
    commonjs = "commonjs"
    script = "script"


class Assets30(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["javascript"]
    content: Annotated[str, Field(description="JavaScript content")]
    module_type: Annotated[ModuleType | None, Field(description="JavaScript module type")] = None


class VastVersion(Enum):
    field_2_0 = "2.0"
    field_3_0 = "3.0"
    field_4_0 = "4.0"
    field_4_1 = "4.1"
    field_4_2 = "4.2"


class TrackingEvent(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    click = "click"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"
    fullscreen = "fullscreen"
    exit_fullscreen = "exitFullscreen"
    player_expand = "playerExpand"
    player_collapse = "playerCollapse"


class Assets31(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns VAST XML")]
    content: Annotated[str | None, Field(description="Inline VAST XML content")] = None
    vast_version: Annotated[VastVersion | None, Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        bool | None, Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        int | None, Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent] | None, Field(description="Tracking events supported by this VAST tag")
    ] = None


class Assets32(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[AnyUrl | None, Field(description="URL endpoint that returns VAST XML")] = None
    content: Annotated[str, Field(description="Inline VAST XML content")]
    vast_version: Annotated[VastVersion | None, Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        bool | None, Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        int | None, Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent] | None, Field(description="Tracking events supported by this VAST tag")
    ] = None


class DaastVersion(Enum):
    field_1_0 = "1.0"
    field_1_1 = "1.1"


class TrackingEvent10(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"


class Assets33(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns DAAST XML")]
    content: Annotated[str | None, Field(description="Inline DAAST XML content")] = None
    daast_version: Annotated[DaastVersion | None, Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent10] | None, Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[bool | None, Field(description="Whether companion display ads are included")] = None


class Assets34(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[AnyUrl | None, Field(description="URL endpoint that returns DAAST XML")] = None
    content: Annotated[str, Field(description="Inline DAAST XML content")]
    daast_version: Annotated[DaastVersion | None, Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent10] | None, Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[bool | None, Field(description="Whether companion display ads are included")] = None


class Colors(BaseModel):
    primary: str | None = None
    secondary: str | None = None
    accent: str | None = None


class Assets35(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["promoted_offerings"]
    url: Annotated[
        AnyUrl | None, Field(description="URL of the advertiser's brand or offering (e.g., https://retailer.com)")
    ] = None
    colors: Annotated[Colors | None, Field(description="Brand colors")] = None
    fonts: Annotated[list[str] | None, Field(description="Brand fonts")] = None
    tone: Annotated[str | None, Field(description="Brand tone/voice")] = None


class Assets36(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["url"]
    url: Annotated[AnyUrl, Field(description="URL reference")]
    description: Annotated[str | None, Field(description="Description of what this URL points to")] = None


class Input(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="Human-readable name for this preview variant")]
    macros: Annotated[dict[str, str] | None, Field(description="Macro values to apply for this preview")] = None
    context_description: Annotated[
        str | None, Field(description="Natural language description of the context for AI-generated content")
    ] = None


class Creative(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Unique identifier for the creative")]
    name: Annotated[str, Field(description="Human-readable creative name")]
    format_id: Annotated[
        FormatId, Field(description="Structured format identifier with agent URL and format name", title="Format ID")
    ]
    assets: Annotated[
        dict[
            str,
            Assets | Assets25 | Assets26 | Assets27 | Assets28 | Assets29 | Assets30 | Assets31 | Assets32 | Assets33 | Assets34 | Assets35 | Assets36,
        ],
        Field(description="Assets required by the format, keyed by asset_role"),
    ]
    inputs: Annotated[
        list[Input] | None,
        Field(description="Preview contexts for generative formats - defines what scenarios to generate previews for"),
    ] = None
    tags: Annotated[list[str] | None, Field(description="User-defined tags for organization and searchability")] = (
        None
    )
    approved: Annotated[
        bool | None,
        Field(
            description="For generative creatives: set to true to approve and finalize, false to request regeneration with updated assets/message. Omit for non-generative creatives."
        ),
    ] = None


class Packages(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buyer_ref: Annotated[str, Field(description="Buyer's reference identifier for this package")]
    product_id: Annotated[
        str, Field(description="Product ID for this package (recommended - replaces deprecated products array)")
    ]
    products: Annotated[
        list[str] | None,
        Field(description="DEPRECATED: Use product_id instead. Array of product IDs - only first product will be used"),
    ] = None
    format_ids: Annotated[
        list[str] | None,
        Field(
            description="Array of format IDs that will be used for this package - must be supported by the product. If omitted, defaults to all formats supported by the product.",
            min_length=1,
        ),
    ] = None
    budget: Annotated[
        float, Field(description="Budget allocation for this package in the media buy's currency", ge=0.0)
    ]
    pacing: Annotated[Pacing | None, Field(description="Budget pacing strategy", title="Pacing")] = None
    pricing_option_id: Annotated[
        str, Field(description="ID of the selected pricing option from the product's pricing_options array")
    ]
    bid_price: Annotated[
        float | None,
        Field(description="Bid price for auction-based CPM pricing (required if using cpm-auction-option)", ge=0.0),
    ] = None
    targeting_overlay: Annotated[
        TargetingOverlay | None,
        Field(
            description="Optional geographic refinements for media buys. Most targeting should be expressed in the brief and handled by the publisher. These fields are primarily for geographic restrictions (RCT testing, regulatory compliance).",
            title="Targeting Overlay",
        ),
    ] = None
    creative_ids: Annotated[
        list[str] | None,
        Field(
            description="Creative IDs to assign to this package at creation time (references existing library creatives)"
        ),
    ] = None
    creatives: Annotated[
        list[Creative] | None,
        Field(
            description="Full creative objects to upload and assign to this package at creation time (alternative to creative_ids - creatives will be added to library). Supports both static and generative creatives.",
            max_length=100,
        ),
    ] = None


class TargetingOverlay3(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    geo_country_any_of: Annotated[
        list[GeoCountryAnyOfItem] | None,
        Field(
            description="Restrict delivery to specific countries (ISO codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_region_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific regions/states. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_metro_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific metro areas (DMA codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_postal_code_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific postal/ZIP codes. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    frequency_cap: Annotated[
        FrequencyCap | None,
        Field(description="Frequency capping settings for package-level application", title="Frequency Cap"),
    ] = None


class Assets37(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["image"]
    url: Annotated[AnyUrl, Field(description="URL to the image asset")]
    width: Annotated[int | None, Field(description="Image width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Image height in pixels", ge=1)] = None
    format: Annotated[str | None, Field(description="Image file format (jpg, png, gif, webp, etc.)")] = None
    alt_text: Annotated[str | None, Field(description="Alternative text for accessibility")] = None


class Assets38(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["video"]
    url: Annotated[AnyUrl, Field(description="URL to the video asset")]
    width: Annotated[int | None, Field(description="Video width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Video height in pixels", ge=1)] = None
    duration_ms: Annotated[int | None, Field(description="Video duration in milliseconds", ge=0)] = None
    format: Annotated[str | None, Field(description="Video file format (mp4, webm, mov, etc.)")] = None
    bitrate_kbps: Annotated[int | None, Field(description="Video bitrate in kilobits per second", ge=1)] = None


class Assets39(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["audio"]
    url: Annotated[AnyUrl, Field(description="URL to the audio asset")]
    duration_ms: Annotated[int | None, Field(description="Audio duration in milliseconds", ge=0)] = None
    format: Annotated[str | None, Field(description="Audio file format (mp3, wav, aac, etc.)")] = None
    bitrate_kbps: Annotated[int | None, Field(description="Audio bitrate in kilobits per second", ge=1)] = None


class Assets40(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["text"]
    content: Annotated[str, Field(description="Text content")]
    max_length: Annotated[int | None, Field(description="Maximum character length constraint", ge=1)] = None
    language: Annotated[str | None, Field(description="Language code (e.g., 'en', 'es', 'fr')")] = None


class Assets41(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["html"]
    content: Annotated[str, Field(description="HTML content")]
    version: Annotated[str | None, Field(description="HTML version (e.g., 'HTML5')")] = None


class Assets42(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["css"]
    content: Annotated[str, Field(description="CSS content")]
    media: Annotated[str | None, Field(description="CSS media query context (e.g., 'screen', 'print')")] = None


class Assets43(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["javascript"]
    content: Annotated[str, Field(description="JavaScript content")]
    module_type: Annotated[ModuleType | None, Field(description="JavaScript module type")] = None


class TrackingEvent12(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    click = "click"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"
    fullscreen = "fullscreen"
    exit_fullscreen = "exitFullscreen"
    player_expand = "playerExpand"
    player_collapse = "playerCollapse"


class Assets44(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns VAST XML")]
    content: Annotated[str | None, Field(description="Inline VAST XML content")] = None
    vast_version: Annotated[VastVersion | None, Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        bool | None, Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        int | None, Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent12] | None, Field(description="Tracking events supported by this VAST tag")
    ] = None


class Assets45(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[AnyUrl | None, Field(description="URL endpoint that returns VAST XML")] = None
    content: Annotated[str, Field(description="Inline VAST XML content")]
    vast_version: Annotated[VastVersion | None, Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        bool | None, Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        int | None, Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent12] | None, Field(description="Tracking events supported by this VAST tag")
    ] = None


class TrackingEvent14(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"


class Assets46(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns DAAST XML")]
    content: Annotated[str | None, Field(description="Inline DAAST XML content")] = None
    daast_version: Annotated[DaastVersion | None, Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent14] | None, Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[bool | None, Field(description="Whether companion display ads are included")] = None


class Assets47(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[AnyUrl | None, Field(description="URL endpoint that returns DAAST XML")] = None
    content: Annotated[str, Field(description="Inline DAAST XML content")]
    daast_version: Annotated[DaastVersion | None, Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent14] | None, Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[bool | None, Field(description="Whether companion display ads are included")] = None


class Assets48(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["promoted_offerings"]
    url: Annotated[
        AnyUrl | None, Field(description="URL of the advertiser's brand or offering (e.g., https://retailer.com)")
    ] = None
    colors: Annotated[Colors | None, Field(description="Brand colors")] = None
    fonts: Annotated[list[str] | None, Field(description="Brand fonts")] = None
    tone: Annotated[str | None, Field(description="Brand tone/voice")] = None


class Assets49(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["url"]
    url: Annotated[AnyUrl, Field(description="URL reference")]
    description: Annotated[str | None, Field(description="Description of what this URL points to")] = None


class Creative1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Unique identifier for the creative")]
    name: Annotated[str, Field(description="Human-readable creative name")]
    format_id: Annotated[
        FormatId, Field(description="Structured format identifier with agent URL and format name", title="Format ID")
    ]
    assets: Annotated[
        dict[
            str,
            Assets37 | Assets38 | Assets39 | Assets40 | Assets41 | Assets42 | Assets43 | Assets44 | Assets45 | Assets46 | Assets47 | Assets48 | Assets49,
        ],
        Field(description="Assets required by the format, keyed by asset_role"),
    ]
    inputs: Annotated[
        list[Input] | None,
        Field(description="Preview contexts for generative formats - defines what scenarios to generate previews for"),
    ] = None
    tags: Annotated[list[str] | None, Field(description="User-defined tags for organization and searchability")] = (
        None
    )
    approved: Annotated[
        bool | None,
        Field(
            description="For generative creatives: set to true to approve and finalize, false to request regeneration with updated assets/message. Omit for non-generative creatives."
        ),
    ] = None


class Packages1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buyer_ref: Annotated[str, Field(description="Buyer's reference identifier for this package")]
    product_id: Annotated[
        str | None,
        Field(description="Product ID for this package (recommended - replaces deprecated products array)"),
    ] = None
    products: Annotated[
        list[str],
        Field(description="DEPRECATED: Use product_id instead. Array of product IDs - only first product will be used"),
    ]
    format_ids: Annotated[
        list[str] | None,
        Field(
            description="Array of format IDs that will be used for this package - must be supported by the product. If omitted, defaults to all formats supported by the product.",
            min_length=1,
        ),
    ] = None
    budget: Annotated[
        float, Field(description="Budget allocation for this package in the media buy's currency", ge=0.0)
    ]
    pacing: Annotated[Pacing | None, Field(description="Budget pacing strategy", title="Pacing")] = None
    pricing_option_id: Annotated[
        str, Field(description="ID of the selected pricing option from the product's pricing_options array")
    ]
    bid_price: Annotated[
        float | None,
        Field(description="Bid price for auction-based CPM pricing (required if using cpm-auction-option)", ge=0.0),
    ] = None
    targeting_overlay: Annotated[
        TargetingOverlay3 | None,
        Field(
            description="Optional geographic refinements for media buys. Most targeting should be expressed in the brief and handled by the publisher. These fields are primarily for geographic restrictions (RCT testing, regulatory compliance).",
            title="Targeting Overlay",
        ),
    ] = None
    creative_ids: Annotated[
        list[str] | None,
        Field(
            description="Creative IDs to assign to this package at creation time (references existing library creatives)"
        ),
    ] = None
    creatives: Annotated[
        list[Creative1] | None,
        Field(
            description="Full creative objects to upload and assign to this package at creation time (alternative to creative_ids - creatives will be added to library). Supports both static and generative creatives.",
            max_length=100,
        ),
    ] = None


class Logo(BaseModel):
    url: Annotated[AnyUrl, Field(description="URL to the logo asset")]
    tags: Annotated[
        list[str] | None,
        Field(
            description="Semantic tags describing the logo variant (e.g., 'dark', 'light', 'square', 'horizontal', 'icon')"
        ),
    ] = None
    width: Annotated[int | None, Field(description="Logo width in pixels")] = None
    height: Annotated[int | None, Field(description="Logo height in pixels")] = None


class Colors7(BaseModel):
    primary: Annotated[
        str | None, Field(description="Primary brand color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    secondary: Annotated[
        str | None, Field(description="Secondary brand color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    accent: Annotated[str | None, Field(description="Accent color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")] = None
    background: Annotated[
        str | None, Field(description="Background color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    text: Annotated[str | None, Field(description="Text color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")] = None


class Fonts(BaseModel):
    primary: Annotated[str | None, Field(description="Primary font family name")] = None
    secondary: Annotated[str | None, Field(description="Secondary font family name")] = None
    font_urls: Annotated[list[AnyUrl] | None, Field(description="URLs to web font files if using custom fonts")] = (
        None
    )


class AssetType(Enum):
    image = "image"
    video = "video"
    audio = "audio"
    text = "text"


class Asset(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[str, Field(description="Unique identifier for this asset")]
    asset_type: Annotated[AssetType, Field(description="Type of asset")]
    url: Annotated[AnyUrl, Field(description="URL to CDN-hosted asset file")]
    tags: Annotated[
        list[str] | None,
        Field(description="Tags for asset discovery (e.g., 'holiday', 'lifestyle', 'product_shot')"),
    ] = None
    name: Annotated[str | None, Field(description="Human-readable asset name")] = None
    description: Annotated[str | None, Field(description="Asset description or usage notes")] = None
    width: Annotated[int | None, Field(description="Image/video width in pixels")] = None
    height: Annotated[int | None, Field(description="Image/video height in pixels")] = None
    duration_seconds: Annotated[float | None, Field(description="Video/audio duration in seconds")] = None
    file_size_bytes: Annotated[int | None, Field(description="File size in bytes")] = None
    format: Annotated[str | None, Field(description="File format (e.g., 'jpg', 'mp4', 'mp3')")] = None
    metadata: Annotated[dict[str, Any] | None, Field(description="Additional asset-specific metadata")] = None


class FeedFormat(Enum):
    google_merchant_center = "google_merchant_center"
    facebook_catalog = "facebook_catalog"
    custom = "custom"


class UpdateFrequency(Enum):
    realtime = "realtime"
    hourly = "hourly"
    daily = "daily"
    weekly = "weekly"


class ProductCatalog(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    feed_url: Annotated[AnyUrl, Field(description="URL to product catalog feed")]
    feed_format: Annotated[FeedFormat | None, Field(description="Format of the product feed")] = (
        "google_merchant_center"
    )
    categories: Annotated[
        list[str] | None, Field(description="Product categories available in the catalog (for filtering)")
    ] = None
    last_updated: Annotated[AwareDatetime | None, Field(description="When the product catalog was last updated")] = (
        None
    )
    update_frequency: Annotated[
        UpdateFrequency | None, Field(description="How frequently the product catalog is updated")
    ] = None


class Disclaimer(BaseModel):
    text: Annotated[str, Field(description="Disclaimer text")]
    context: Annotated[
        str | None,
        Field(description="When this disclaimer applies (e.g., 'financial_products', 'health_claims', 'all')"),
    ] = None
    required: Annotated[bool | None, Field(description="Whether this disclaimer must appear")] = True


class Contact(BaseModel):
    email: Annotated[EmailStr | None, Field(description="Contact email")] = None
    phone: Annotated[str | None, Field(description="Contact phone number")] = None


class Metadata(BaseModel):
    created_date: Annotated[AwareDatetime | None, Field(description="When this brand manifest was created")] = None
    updated_date: Annotated[AwareDatetime | None, Field(description="When this brand manifest was last updated")] = (
        None
    )
    version: Annotated[str | None, Field(description="Brand card version number")] = None


class BrandManifest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl,
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ]
    name: Annotated[str | None, Field(description="Brand or business name")] = None
    logos: Annotated[
        list[Logo] | None, Field(description="Brand logo assets with semantic tags for different use cases")
    ] = None
    colors: Annotated[Colors7 | None, Field(description="Brand color palette")] = None
    fonts: Annotated[Fonts | None, Field(description="Brand typography guidelines")] = None
    tone: Annotated[
        str | None,
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[str | None, Field(description="Brand tagline or slogan")] = None
    assets: Annotated[
        list[Asset] | None,
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        ProductCatalog | None,
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        list[Disclaimer] | None,
        Field(description="Legal disclaimers or required text that must appear in creatives"),
    ] = None
    industry: Annotated[
        str | None, Field(description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')")
    ] = None
    target_audience: Annotated[str | None, Field(description="Primary target audience description")] = None
    contact: Annotated[Contact | None, Field(description="Brand contact information")] = None
    metadata: Annotated[Metadata | None, Field(description="Additional brand metadata")] = None


class Asset6(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[str, Field(description="Unique identifier for this asset")]
    asset_type: Annotated[AssetType, Field(description="Type of asset")]
    url: Annotated[AnyUrl, Field(description="URL to CDN-hosted asset file")]
    tags: Annotated[
        list[str] | None,
        Field(description="Tags for asset discovery (e.g., 'holiday', 'lifestyle', 'product_shot')"),
    ] = None
    name: Annotated[str | None, Field(description="Human-readable asset name")] = None
    description: Annotated[str | None, Field(description="Asset description or usage notes")] = None
    width: Annotated[int | None, Field(description="Image/video width in pixels")] = None
    height: Annotated[int | None, Field(description="Image/video height in pixels")] = None
    duration_seconds: Annotated[float | None, Field(description="Video/audio duration in seconds")] = None
    file_size_bytes: Annotated[int | None, Field(description="File size in bytes")] = None
    format: Annotated[str | None, Field(description="File format (e.g., 'jpg', 'mp4', 'mp3')")] = None
    metadata: Annotated[dict[str, Any] | None, Field(description="Additional asset-specific metadata")] = None


class ProductCatalog5(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    feed_url: Annotated[AnyUrl, Field(description="URL to product catalog feed")]
    feed_format: Annotated[FeedFormat | None, Field(description="Format of the product feed")] = (
        "google_merchant_center"
    )
    categories: Annotated[
        list[str] | None, Field(description="Product categories available in the catalog (for filtering)")
    ] = None
    last_updated: Annotated[AwareDatetime | None, Field(description="When the product catalog was last updated")] = (
        None
    )
    update_frequency: Annotated[
        UpdateFrequency | None, Field(description="How frequently the product catalog is updated")
    ] = None


class BrandManifest4(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl | None,
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ] = None
    name: Annotated[str, Field(description="Brand or business name")]
    logos: Annotated[
        list[Logo] | None, Field(description="Brand logo assets with semantic tags for different use cases")
    ] = None
    colors: Annotated[Colors7 | None, Field(description="Brand color palette")] = None
    fonts: Annotated[Fonts | None, Field(description="Brand typography guidelines")] = None
    tone: Annotated[
        str | None,
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[str | None, Field(description="Brand tagline or slogan")] = None
    assets: Annotated[
        list[Asset6] | None,
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        ProductCatalog5 | None,
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        list[Disclaimer] | None,
        Field(description="Legal disclaimers or required text that must appear in creatives"),
    ] = None
    industry: Annotated[
        str | None, Field(description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')")
    ] = None
    target_audience: Annotated[str | None, Field(description="Primary target audience description")] = None
    contact: Annotated[Contact | None, Field(description="Brand contact information")] = None
    metadata: Annotated[Metadata | None, Field(description="Additional brand metadata")] = None


class Scheme(Enum):
    bearer = "Bearer"
    hmac_sha256 = "HMAC-SHA256"


class Authentication(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    schemes: Annotated[
        list[Scheme],
        Field(
            description="Array of authentication schemes. Supported: ['Bearer'] for simple token auth, ['HMAC-SHA256'] for signature verification (recommended for production)",
            max_length=1,
            min_length=1,
        ),
    ]
    credentials: Annotated[
        str,
        Field(
            description="Credentials for authentication. For Bearer: token sent in Authorization header. For HMAC-SHA256: shared secret used to generate signature. Minimum 32 characters. Exchanged out-of-band during onboarding.",
            min_length=32,
        ),
    ]


class ReportingFrequency(Enum):
    hourly = "hourly"
    daily = "daily"
    monthly = "monthly"


class RequestedMetric(Enum):
    impressions = "impressions"
    spend = "spend"
    clicks = "clicks"
    ctr = "ctr"
    video_completions = "video_completions"
    completion_rate = "completion_rate"
    conversions = "conversions"
    viewability = "viewability"
    engagement_rate = "engagement_rate"


class ReportingWebhook(BaseModel):
    url: Annotated[AnyUrl, Field(description="Webhook endpoint URL for task status notifications")]
    token: Annotated[
        str | None,
        Field(
            description="Optional client-provided token for webhook validation. Echoed back in webhook payload to validate request authenticity.",
            min_length=16,
        ),
    ] = None
    authentication: Annotated[
        Authentication, Field(description="Authentication configuration for webhook delivery (A2A-compatible)")
    ]
    reporting_frequency: Annotated[
        ReportingFrequency,
        Field(
            description="Frequency for automated reporting delivery. Must be supported by all products in the media buy."
        ),
    ]
    requested_metrics: Annotated[
        list[RequestedMetric] | None,
        Field(
            description="Optional list of metrics to include in webhook notifications. If omitted, all available metrics are included. Must be subset of product's available_metrics."
        ),
    ] = None


class CreateMediaBuyRequest1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buyer_ref: Annotated[str, Field(description="Buyer's reference identifier for this media buy")]
    packages: Annotated[list[Packages | Packages1], Field(description="Array of package configurations")]
    brand_manifest: Annotated[
        BrandManifest | BrandManifest4 | AnyUrl | None,
        Field(
            description="Brand manifest provided either as an inline object or a URL string pointing to a hosted manifest",
            examples=[
                {
                    "description": "Inline brand manifest",
                    "data": {
                        "url": "https://acmecorp.com",
                        "name": "ACME Corporation",
                        "colors": {"primary": "#FF6B35"},
                    },
                },
                {
                    "description": "URL string reference to hosted manifest",
                    "data": "https://cdn.acmecorp.com/brand-manifest.json",
                },
            ],
            title="Brand Manifest Reference",
        ),
    ] = None
    promoted_offering: Annotated[
        str,
        Field(
            description="DEPRECATED: Use brand_manifest instead. Legacy field for describing what is being promoted."
        ),
    ]
    po_number: Annotated[str | None, Field(description="Purchase order number for tracking")] = None
    start_time: Annotated[
        str | AwareDatetime,
        Field(description="Campaign start timing: 'asap' or ISO 8601 date-time", title="Start Timing"),
    ]
    end_time: Annotated[AwareDatetime, Field(description="Campaign end date/time in ISO 8601 format")]
    budget: Annotated[
        float,
        Field(
            description="Total budget for this media buy. Currency is determined by the pricing_option_id selected in each package.",
            ge=0.0,
        ),
    ]
    reporting_webhook: ReportingWebhook | None = None


class TargetingOverlay4(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    geo_country_any_of: Annotated[
        list[GeoCountryAnyOfItem] | None,
        Field(
            description="Restrict delivery to specific countries (ISO codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_region_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific regions/states. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_metro_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific metro areas (DMA codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_postal_code_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific postal/ZIP codes. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    frequency_cap: Annotated[
        FrequencyCap | None,
        Field(description="Frequency capping settings for package-level application", title="Frequency Cap"),
    ] = None


class Assets50(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["image"]
    url: Annotated[AnyUrl, Field(description="URL to the image asset")]
    width: Annotated[int | None, Field(description="Image width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Image height in pixels", ge=1)] = None
    format: Annotated[str | None, Field(description="Image file format (jpg, png, gif, webp, etc.)")] = None
    alt_text: Annotated[str | None, Field(description="Alternative text for accessibility")] = None


class Assets51(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["video"]
    url: Annotated[AnyUrl, Field(description="URL to the video asset")]
    width: Annotated[int | None, Field(description="Video width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Video height in pixels", ge=1)] = None
    duration_ms: Annotated[int | None, Field(description="Video duration in milliseconds", ge=0)] = None
    format: Annotated[str | None, Field(description="Video file format (mp4, webm, mov, etc.)")] = None
    bitrate_kbps: Annotated[int | None, Field(description="Video bitrate in kilobits per second", ge=1)] = None


class Assets52(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["audio"]
    url: Annotated[AnyUrl, Field(description="URL to the audio asset")]
    duration_ms: Annotated[int | None, Field(description="Audio duration in milliseconds", ge=0)] = None
    format: Annotated[str | None, Field(description="Audio file format (mp3, wav, aac, etc.)")] = None
    bitrate_kbps: Annotated[int | None, Field(description="Audio bitrate in kilobits per second", ge=1)] = None


class Assets53(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["text"]
    content: Annotated[str, Field(description="Text content")]
    max_length: Annotated[int | None, Field(description="Maximum character length constraint", ge=1)] = None
    language: Annotated[str | None, Field(description="Language code (e.g., 'en', 'es', 'fr')")] = None


class Assets54(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["html"]
    content: Annotated[str, Field(description="HTML content")]
    version: Annotated[str | None, Field(description="HTML version (e.g., 'HTML5')")] = None


class Assets55(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["css"]
    content: Annotated[str, Field(description="CSS content")]
    media: Annotated[str | None, Field(description="CSS media query context (e.g., 'screen', 'print')")] = None


class Assets56(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["javascript"]
    content: Annotated[str, Field(description="JavaScript content")]
    module_type: Annotated[ModuleType | None, Field(description="JavaScript module type")] = None


class TrackingEvent16(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    click = "click"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"
    fullscreen = "fullscreen"
    exit_fullscreen = "exitFullscreen"
    player_expand = "playerExpand"
    player_collapse = "playerCollapse"


class Assets57(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns VAST XML")]
    content: Annotated[str | None, Field(description="Inline VAST XML content")] = None
    vast_version: Annotated[VastVersion | None, Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        bool | None, Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        int | None, Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent16] | None, Field(description="Tracking events supported by this VAST tag")
    ] = None


class Assets58(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[AnyUrl | None, Field(description="URL endpoint that returns VAST XML")] = None
    content: Annotated[str, Field(description="Inline VAST XML content")]
    vast_version: Annotated[VastVersion | None, Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        bool | None, Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        int | None, Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent16] | None, Field(description="Tracking events supported by this VAST tag")
    ] = None


class TrackingEvent18(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"


class Assets59(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns DAAST XML")]
    content: Annotated[str | None, Field(description="Inline DAAST XML content")] = None
    daast_version: Annotated[DaastVersion | None, Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent18] | None, Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[bool | None, Field(description="Whether companion display ads are included")] = None


class Assets60(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[AnyUrl | None, Field(description="URL endpoint that returns DAAST XML")] = None
    content: Annotated[str, Field(description="Inline DAAST XML content")]
    daast_version: Annotated[DaastVersion | None, Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent18] | None, Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[bool | None, Field(description="Whether companion display ads are included")] = None


class Colors9(BaseModel):
    primary: str | None = None
    secondary: str | None = None
    accent: str | None = None


class Assets61(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["promoted_offerings"]
    url: Annotated[
        AnyUrl | None, Field(description="URL of the advertiser's brand or offering (e.g., https://retailer.com)")
    ] = None
    colors: Annotated[Colors9 | None, Field(description="Brand colors")] = None
    fonts: Annotated[list[str] | None, Field(description="Brand fonts")] = None
    tone: Annotated[str | None, Field(description="Brand tone/voice")] = None


class Assets62(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["url"]
    url: Annotated[AnyUrl, Field(description="URL reference")]
    description: Annotated[str | None, Field(description="Description of what this URL points to")] = None


class Creative2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Unique identifier for the creative")]
    name: Annotated[str, Field(description="Human-readable creative name")]
    format_id: Annotated[
        FormatId, Field(description="Structured format identifier with agent URL and format name", title="Format ID")
    ]
    assets: Annotated[
        dict[
            str,
            Assets50 | Assets51 | Assets52 | Assets53 | Assets54 | Assets55 | Assets56 | Assets57 | Assets58 | Assets59 | Assets60 | Assets61 | Assets62,
        ],
        Field(description="Assets required by the format, keyed by asset_role"),
    ]
    inputs: Annotated[
        list[Input] | None,
        Field(description="Preview contexts for generative formats - defines what scenarios to generate previews for"),
    ] = None
    tags: Annotated[list[str] | None, Field(description="User-defined tags for organization and searchability")] = (
        None
    )
    approved: Annotated[
        bool | None,
        Field(
            description="For generative creatives: set to true to approve and finalize, false to request regeneration with updated assets/message. Omit for non-generative creatives."
        ),
    ] = None


class Packages2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buyer_ref: Annotated[str, Field(description="Buyer's reference identifier for this package")]
    product_id: Annotated[
        str, Field(description="Product ID for this package (recommended - replaces deprecated products array)")
    ]
    products: Annotated[
        list[str] | None,
        Field(description="DEPRECATED: Use product_id instead. Array of product IDs - only first product will be used"),
    ] = None
    format_ids: Annotated[
        list[str] | None,
        Field(
            description="Array of format IDs that will be used for this package - must be supported by the product. If omitted, defaults to all formats supported by the product.",
            min_length=1,
        ),
    ] = None
    budget: Annotated[
        float, Field(description="Budget allocation for this package in the media buy's currency", ge=0.0)
    ]
    pacing: Annotated[Pacing | None, Field(description="Budget pacing strategy", title="Pacing")] = None
    pricing_option_id: Annotated[
        str, Field(description="ID of the selected pricing option from the product's pricing_options array")
    ]
    bid_price: Annotated[
        float | None,
        Field(description="Bid price for auction-based CPM pricing (required if using cpm-auction-option)", ge=0.0),
    ] = None
    targeting_overlay: Annotated[
        TargetingOverlay4 | None,
        Field(
            description="Optional geographic refinements for media buys. Most targeting should be expressed in the brief and handled by the publisher. These fields are primarily for geographic restrictions (RCT testing, regulatory compliance).",
            title="Targeting Overlay",
        ),
    ] = None
    creative_ids: Annotated[
        list[str] | None,
        Field(
            description="Creative IDs to assign to this package at creation time (references existing library creatives)"
        ),
    ] = None
    creatives: Annotated[
        list[Creative2] | None,
        Field(
            description="Full creative objects to upload and assign to this package at creation time (alternative to creative_ids - creatives will be added to library). Supports both static and generative creatives.",
            max_length=100,
        ),
    ] = None


class TargetingOverlay5(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    geo_country_any_of: Annotated[
        list[GeoCountryAnyOfItem] | None,
        Field(
            description="Restrict delivery to specific countries (ISO codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_region_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific regions/states. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_metro_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific metro areas (DMA codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_postal_code_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific postal/ZIP codes. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    frequency_cap: Annotated[
        FrequencyCap | None,
        Field(description="Frequency capping settings for package-level application", title="Frequency Cap"),
    ] = None


class Assets63(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["image"]
    url: Annotated[AnyUrl, Field(description="URL to the image asset")]
    width: Annotated[int | None, Field(description="Image width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Image height in pixels", ge=1)] = None
    format: Annotated[str | None, Field(description="Image file format (jpg, png, gif, webp, etc.)")] = None
    alt_text: Annotated[str | None, Field(description="Alternative text for accessibility")] = None


class Assets64(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["video"]
    url: Annotated[AnyUrl, Field(description="URL to the video asset")]
    width: Annotated[int | None, Field(description="Video width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Video height in pixels", ge=1)] = None
    duration_ms: Annotated[int | None, Field(description="Video duration in milliseconds", ge=0)] = None
    format: Annotated[str | None, Field(description="Video file format (mp4, webm, mov, etc.)")] = None
    bitrate_kbps: Annotated[int | None, Field(description="Video bitrate in kilobits per second", ge=1)] = None


class Assets65(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["audio"]
    url: Annotated[AnyUrl, Field(description="URL to the audio asset")]
    duration_ms: Annotated[int | None, Field(description="Audio duration in milliseconds", ge=0)] = None
    format: Annotated[str | None, Field(description="Audio file format (mp3, wav, aac, etc.)")] = None
    bitrate_kbps: Annotated[int | None, Field(description="Audio bitrate in kilobits per second", ge=1)] = None


class Assets66(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["text"]
    content: Annotated[str, Field(description="Text content")]
    max_length: Annotated[int | None, Field(description="Maximum character length constraint", ge=1)] = None
    language: Annotated[str | None, Field(description="Language code (e.g., 'en', 'es', 'fr')")] = None


class Assets67(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["html"]
    content: Annotated[str, Field(description="HTML content")]
    version: Annotated[str | None, Field(description="HTML version (e.g., 'HTML5')")] = None


class Assets68(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["css"]
    content: Annotated[str, Field(description="CSS content")]
    media: Annotated[str | None, Field(description="CSS media query context (e.g., 'screen', 'print')")] = None


class Assets69(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["javascript"]
    content: Annotated[str, Field(description="JavaScript content")]
    module_type: Annotated[ModuleType | None, Field(description="JavaScript module type")] = None


class TrackingEvent20(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    click = "click"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"
    fullscreen = "fullscreen"
    exit_fullscreen = "exitFullscreen"
    player_expand = "playerExpand"
    player_collapse = "playerCollapse"


class Assets70(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns VAST XML")]
    content: Annotated[str | None, Field(description="Inline VAST XML content")] = None
    vast_version: Annotated[VastVersion | None, Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        bool | None, Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        int | None, Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent20] | None, Field(description="Tracking events supported by this VAST tag")
    ] = None


class Assets71(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[AnyUrl | None, Field(description="URL endpoint that returns VAST XML")] = None
    content: Annotated[str, Field(description="Inline VAST XML content")]
    vast_version: Annotated[VastVersion | None, Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        bool | None, Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        int | None, Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent20] | None, Field(description="Tracking events supported by this VAST tag")
    ] = None


class TrackingEvent22(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"


class Assets72(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns DAAST XML")]
    content: Annotated[str | None, Field(description="Inline DAAST XML content")] = None
    daast_version: Annotated[DaastVersion | None, Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent22] | None, Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[bool | None, Field(description="Whether companion display ads are included")] = None


class Assets73(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[AnyUrl | None, Field(description="URL endpoint that returns DAAST XML")] = None
    content: Annotated[str, Field(description="Inline DAAST XML content")]
    daast_version: Annotated[DaastVersion | None, Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent22] | None, Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[bool | None, Field(description="Whether companion display ads are included")] = None


class Assets74(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["promoted_offerings"]
    url: Annotated[
        AnyUrl | None, Field(description="URL of the advertiser's brand or offering (e.g., https://retailer.com)")
    ] = None
    colors: Annotated[Colors9 | None, Field(description="Brand colors")] = None
    fonts: Annotated[list[str] | None, Field(description="Brand fonts")] = None
    tone: Annotated[str | None, Field(description="Brand tone/voice")] = None


class Assets75(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["url"]
    url: Annotated[AnyUrl, Field(description="URL reference")]
    description: Annotated[str | None, Field(description="Description of what this URL points to")] = None


class Creative3(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Unique identifier for the creative")]
    name: Annotated[str, Field(description="Human-readable creative name")]
    format_id: Annotated[
        FormatId, Field(description="Structured format identifier with agent URL and format name", title="Format ID")
    ]
    assets: Annotated[
        dict[
            str,
            Assets63 | Assets64 | Assets65 | Assets66 | Assets67 | Assets68 | Assets69 | Assets70 | Assets71 | Assets72 | Assets73 | Assets74 | Assets75,
        ],
        Field(description="Assets required by the format, keyed by asset_role"),
    ]
    inputs: Annotated[
        list[Input] | None,
        Field(description="Preview contexts for generative formats - defines what scenarios to generate previews for"),
    ] = None
    tags: Annotated[list[str] | None, Field(description="User-defined tags for organization and searchability")] = (
        None
    )
    approved: Annotated[
        bool | None,
        Field(
            description="For generative creatives: set to true to approve and finalize, false to request regeneration with updated assets/message. Omit for non-generative creatives."
        ),
    ] = None


class Packages3(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buyer_ref: Annotated[str, Field(description="Buyer's reference identifier for this package")]
    product_id: Annotated[
        str | None,
        Field(description="Product ID for this package (recommended - replaces deprecated products array)"),
    ] = None
    products: Annotated[
        list[str],
        Field(description="DEPRECATED: Use product_id instead. Array of product IDs - only first product will be used"),
    ]
    format_ids: Annotated[
        list[str] | None,
        Field(
            description="Array of format IDs that will be used for this package - must be supported by the product. If omitted, defaults to all formats supported by the product.",
            min_length=1,
        ),
    ] = None
    budget: Annotated[
        float, Field(description="Budget allocation for this package in the media buy's currency", ge=0.0)
    ]
    pacing: Annotated[Pacing | None, Field(description="Budget pacing strategy", title="Pacing")] = None
    pricing_option_id: Annotated[
        str, Field(description="ID of the selected pricing option from the product's pricing_options array")
    ]
    bid_price: Annotated[
        float | None,
        Field(description="Bid price for auction-based CPM pricing (required if using cpm-auction-option)", ge=0.0),
    ] = None
    targeting_overlay: Annotated[
        TargetingOverlay5 | None,
        Field(
            description="Optional geographic refinements for media buys. Most targeting should be expressed in the brief and handled by the publisher. These fields are primarily for geographic restrictions (RCT testing, regulatory compliance).",
            title="Targeting Overlay",
        ),
    ] = None
    creative_ids: Annotated[
        list[str] | None,
        Field(
            description="Creative IDs to assign to this package at creation time (references existing library creatives)"
        ),
    ] = None
    creatives: Annotated[
        list[Creative3] | None,
        Field(
            description="Full creative objects to upload and assign to this package at creation time (alternative to creative_ids - creatives will be added to library). Supports both static and generative creatives.",
            max_length=100,
        ),
    ] = None


class Colors11(BaseModel):
    primary: Annotated[
        str | None, Field(description="Primary brand color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    secondary: Annotated[
        str | None, Field(description="Secondary brand color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    accent: Annotated[str | None, Field(description="Accent color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")] = None
    background: Annotated[
        str | None, Field(description="Background color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    text: Annotated[str | None, Field(description="Text color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")] = None


class Asset7(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[str, Field(description="Unique identifier for this asset")]
    asset_type: Annotated[AssetType, Field(description="Type of asset")]
    url: Annotated[AnyUrl, Field(description="URL to CDN-hosted asset file")]
    tags: Annotated[
        list[str] | None,
        Field(description="Tags for asset discovery (e.g., 'holiday', 'lifestyle', 'product_shot')"),
    ] = None
    name: Annotated[str | None, Field(description="Human-readable asset name")] = None
    description: Annotated[str | None, Field(description="Asset description or usage notes")] = None
    width: Annotated[int | None, Field(description="Image/video width in pixels")] = None
    height: Annotated[int | None, Field(description="Image/video height in pixels")] = None
    duration_seconds: Annotated[float | None, Field(description="Video/audio duration in seconds")] = None
    file_size_bytes: Annotated[int | None, Field(description="File size in bytes")] = None
    format: Annotated[str | None, Field(description="File format (e.g., 'jpg', 'mp4', 'mp3')")] = None
    metadata: Annotated[dict[str, Any] | None, Field(description="Additional asset-specific metadata")] = None


class ProductCatalog6(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    feed_url: Annotated[AnyUrl, Field(description="URL to product catalog feed")]
    feed_format: Annotated[FeedFormat | None, Field(description="Format of the product feed")] = (
        "google_merchant_center"
    )
    categories: Annotated[
        list[str] | None, Field(description="Product categories available in the catalog (for filtering)")
    ] = None
    last_updated: Annotated[AwareDatetime | None, Field(description="When the product catalog was last updated")] = (
        None
    )
    update_frequency: Annotated[
        UpdateFrequency | None, Field(description="How frequently the product catalog is updated")
    ] = None


class BrandManifest5(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl,
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ]
    name: Annotated[str | None, Field(description="Brand or business name")] = None
    logos: Annotated[
        list[Logo] | None, Field(description="Brand logo assets with semantic tags for different use cases")
    ] = None
    colors: Annotated[Colors11 | None, Field(description="Brand color palette")] = None
    fonts: Annotated[Fonts | None, Field(description="Brand typography guidelines")] = None
    tone: Annotated[
        str | None,
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[str | None, Field(description="Brand tagline or slogan")] = None
    assets: Annotated[
        list[Asset7] | None,
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        ProductCatalog6 | None,
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        list[Disclaimer] | None,
        Field(description="Legal disclaimers or required text that must appear in creatives"),
    ] = None
    industry: Annotated[
        str | None, Field(description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')")
    ] = None
    target_audience: Annotated[str | None, Field(description="Primary target audience description")] = None
    contact: Annotated[Contact | None, Field(description="Brand contact information")] = None
    metadata: Annotated[Metadata | None, Field(description="Additional brand metadata")] = None


class Asset8(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[str, Field(description="Unique identifier for this asset")]
    asset_type: Annotated[AssetType, Field(description="Type of asset")]
    url: Annotated[AnyUrl, Field(description="URL to CDN-hosted asset file")]
    tags: Annotated[
        list[str] | None,
        Field(description="Tags for asset discovery (e.g., 'holiday', 'lifestyle', 'product_shot')"),
    ] = None
    name: Annotated[str | None, Field(description="Human-readable asset name")] = None
    description: Annotated[str | None, Field(description="Asset description or usage notes")] = None
    width: Annotated[int | None, Field(description="Image/video width in pixels")] = None
    height: Annotated[int | None, Field(description="Image/video height in pixels")] = None
    duration_seconds: Annotated[float | None, Field(description="Video/audio duration in seconds")] = None
    file_size_bytes: Annotated[int | None, Field(description="File size in bytes")] = None
    format: Annotated[str | None, Field(description="File format (e.g., 'jpg', 'mp4', 'mp3')")] = None
    metadata: Annotated[dict[str, Any] | None, Field(description="Additional asset-specific metadata")] = None


class ProductCatalog7(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    feed_url: Annotated[AnyUrl, Field(description="URL to product catalog feed")]
    feed_format: Annotated[FeedFormat | None, Field(description="Format of the product feed")] = (
        "google_merchant_center"
    )
    categories: Annotated[
        list[str] | None, Field(description="Product categories available in the catalog (for filtering)")
    ] = None
    last_updated: Annotated[AwareDatetime | None, Field(description="When the product catalog was last updated")] = (
        None
    )
    update_frequency: Annotated[
        UpdateFrequency | None, Field(description="How frequently the product catalog is updated")
    ] = None


class BrandManifest6(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl | None,
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ] = None
    name: Annotated[str, Field(description="Brand or business name")]
    logos: Annotated[
        list[Logo] | None, Field(description="Brand logo assets with semantic tags for different use cases")
    ] = None
    colors: Annotated[Colors11 | None, Field(description="Brand color palette")] = None
    fonts: Annotated[Fonts | None, Field(description="Brand typography guidelines")] = None
    tone: Annotated[
        str | None,
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[str | None, Field(description="Brand tagline or slogan")] = None
    assets: Annotated[
        list[Asset8] | None,
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        ProductCatalog7 | None,
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        list[Disclaimer] | None,
        Field(description="Legal disclaimers or required text that must appear in creatives"),
    ] = None
    industry: Annotated[
        str | None, Field(description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')")
    ] = None
    target_audience: Annotated[str | None, Field(description="Primary target audience description")] = None
    contact: Annotated[Contact | None, Field(description="Brand contact information")] = None
    metadata: Annotated[Metadata | None, Field(description="Additional brand metadata")] = None


class Authentication2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    schemes: Annotated[
        list[Scheme],
        Field(
            description="Array of authentication schemes. Supported: ['Bearer'] for simple token auth, ['HMAC-SHA256'] for signature verification (recommended for production)",
            max_length=1,
            min_length=1,
        ),
    ]
    credentials: Annotated[
        str,
        Field(
            description="Credentials for authentication. For Bearer: token sent in Authorization header. For HMAC-SHA256: shared secret used to generate signature. Minimum 32 characters. Exchanged out-of-band during onboarding.",
            min_length=32,
        ),
    ]


class ReportingWebhook1(BaseModel):
    url: Annotated[AnyUrl, Field(description="Webhook endpoint URL for task status notifications")]
    token: Annotated[
        str | None,
        Field(
            description="Optional client-provided token for webhook validation. Echoed back in webhook payload to validate request authenticity.",
            min_length=16,
        ),
    ] = None
    authentication: Annotated[
        Authentication2, Field(description="Authentication configuration for webhook delivery (A2A-compatible)")
    ]
    reporting_frequency: Annotated[
        ReportingFrequency,
        Field(
            description="Frequency for automated reporting delivery. Must be supported by all products in the media buy."
        ),
    ]
    requested_metrics: Annotated[
        list[RequestedMetric] | None,
        Field(
            description="Optional list of metrics to include in webhook notifications. If omitted, all available metrics are included. Must be subset of product's available_metrics."
        ),
    ] = None


class CreateMediaBuyRequest2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buyer_ref: Annotated[str, Field(description="Buyer's reference identifier for this media buy")]
    packages: Annotated[list[Packages2 | Packages3], Field(description="Array of package configurations")]
    brand_manifest: Annotated[
        BrandManifest5 | BrandManifest6 | AnyUrl,
        Field(
            description="Brand manifest provided either as an inline object or a URL string pointing to a hosted manifest",
            examples=[
                {
                    "description": "Inline brand manifest",
                    "data": {
                        "url": "https://acmecorp.com",
                        "name": "ACME Corporation",
                        "colors": {"primary": "#FF6B35"},
                    },
                },
                {
                    "description": "URL string reference to hosted manifest",
                    "data": "https://cdn.acmecorp.com/brand-manifest.json",
                },
            ],
            title="Brand Manifest Reference",
        ),
    ]
    promoted_offering: Annotated[
        str | None,
        Field(
            description="DEPRECATED: Use brand_manifest instead. Legacy field for describing what is being promoted."
        ),
    ] = None
    po_number: Annotated[str | None, Field(description="Purchase order number for tracking")] = None
    start_time: Annotated[
        str | AwareDatetime,
        Field(description="Campaign start timing: 'asap' or ISO 8601 date-time", title="Start Timing"),
    ]
    end_time: Annotated[AwareDatetime, Field(description="Campaign end date/time in ISO 8601 format")]
    budget: Annotated[
        float,
        Field(
            description="Total budget for this media buy. Currency is determined by the pricing_option_id selected in each package.",
            ge=0.0,
        ),
    ]
    reporting_webhook: ReportingWebhook1 | None = None


class CreateMediaBuyRequest(RootModel[Union[CreateMediaBuyRequest1, CreateMediaBuyRequest2]]):
    root: Annotated[
        CreateMediaBuyRequest1 | CreateMediaBuyRequest2,
        Field(description="Request parameters for creating a media buy", title="Create Media Buy Request"),
    ]
