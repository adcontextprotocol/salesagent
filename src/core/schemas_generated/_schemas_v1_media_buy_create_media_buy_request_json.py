# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_create-media-buy-request_json.json
#   timestamp: 2025-10-13T04:58:05+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, EmailStr, Field, RootModel


class Pacing(Enum):
    even = "even"
    asap = "asap"
    front_loaded = "front_loaded"


class Budget(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    total: Annotated[float, Field(description="Total budget amount", ge=0.0)]
    currency: Annotated[
        str, Field(description="ISO 4217 currency code", examples=["USD", "EUR", "GBP"], pattern="^[A-Z]{3}$")
    ]
    pacing: Annotated[Pacing | None, Field(description="Budget pacing strategy", title="Pacing")] = None


class GeoCountryAnyOfItem(RootModel[str]):
    root: Annotated[str, Field(pattern="^[A-Z]{2}$")]


class FrequencyCap(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    suppress_minutes: Annotated[float, Field(description="Minutes to suppress after impression", ge=0.0)]


class TargetingOverlay(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    geo_country_any_of: Annotated[
        list[GeoCountryAnyOfItem] | None,
        Field(
            description="Restrict delivery to specific countries (ISO codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_region_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific regions/states. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_metro_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific metro areas (DMA codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_postal_code_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific postal/ZIP codes. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    frequency_cap: Annotated[
        FrequencyCap | None,
        Field(description="Frequency capping settings for package-level application", title="Frequency Cap"),
    ] = None


class Packages(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buyer_ref: Annotated[str, Field(description="Buyer's reference identifier for this package")]
    products: Annotated[list[str], Field(description="Array of product IDs to include in this package")]
    format_ids: Annotated[
        list[str],
        Field(description="Array of format IDs that will be used for this package - must be supported by all products"),
    ]
    budget: Annotated[
        Budget | None, Field(description="Budget configuration for a media buy or package", title="Budget")
    ] = None
    targeting_overlay: Annotated[
        TargetingOverlay | None,
        Field(
            description="Optional geographic refinements for media buys. Most targeting should be expressed in the brief and handled by the publisher. These fields are primarily for geographic restrictions (RCT testing, regulatory compliance).",
            title="Targeting Overlay",
        ),
    ] = None
    creative_ids: Annotated[
        list[str] | None, Field(description="Creative IDs to assign to this package at creation time")
    ] = None


class Packages1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    buyer_ref: Annotated[str, Field(description="Buyer's reference identifier for this package")]
    products: Annotated[list[str], Field(description="Array of product IDs to include in this package")]
    format_selection: Annotated[dict[str, Any], Field(description="Dynamic format selection criteria")]
    budget: Annotated[Any | None, Field(description="Circular reference to /schemas/v1/core/budget.json")] = None
    targeting_overlay: Annotated[
        Any | None, Field(description="Circular reference to /schemas/v1/core/targeting.json")
    ] = None
    creative_ids: Annotated[
        list[str] | None, Field(description="Creative IDs to assign to this package at creation time")
    ] = None


class Logo(BaseModel):
    url: Annotated[AnyUrl, Field(description="URL to the logo asset")]
    tags: Annotated[
        list[str] | None,
        Field(
            description="Semantic tags describing the logo variant (e.g., 'dark', 'light', 'square', 'horizontal', 'icon')"
        ),
    ] = None
    width: Annotated[int | None, Field(description="Logo width in pixels")] = None
    height: Annotated[int | None, Field(description="Logo height in pixels")] = None


class Colors(BaseModel):
    primary: Annotated[
        str | None, Field(description="Primary brand color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    secondary: Annotated[
        str | None, Field(description="Secondary brand color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    accent: Annotated[str | None, Field(description="Accent color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")] = None
    background: Annotated[
        str | None, Field(description="Background color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    text: Annotated[str | None, Field(description="Text color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")] = None


class Fonts(BaseModel):
    primary: Annotated[str | None, Field(description="Primary font family name")] = None
    secondary: Annotated[str | None, Field(description="Secondary font family name")] = None
    font_urls: Annotated[list[AnyUrl] | None, Field(description="URLs to web font files if using custom fonts")] = (
        None
    )


class AssetType(Enum):
    image = "image"
    video = "video"
    audio = "audio"
    text = "text"


class Asset(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[str, Field(description="Unique identifier for this asset")]
    asset_type: Annotated[AssetType, Field(description="Type of asset")]
    url: Annotated[AnyUrl, Field(description="URL to CDN-hosted asset file")]
    tags: Annotated[
        list[str] | None,
        Field(description="Tags for asset discovery (e.g., 'holiday', 'lifestyle', 'product_shot')"),
    ] = None
    name: Annotated[str | None, Field(description="Human-readable asset name")] = None
    description: Annotated[str | None, Field(description="Asset description or usage notes")] = None
    width: Annotated[int | None, Field(description="Image/video width in pixels")] = None
    height: Annotated[int | None, Field(description="Image/video height in pixels")] = None
    duration_seconds: Annotated[float | None, Field(description="Video/audio duration in seconds")] = None
    file_size_bytes: Annotated[int | None, Field(description="File size in bytes")] = None
    format: Annotated[str | None, Field(description="File format (e.g., 'jpg', 'mp4', 'mp3')")] = None
    metadata: Annotated[dict[str, Any] | None, Field(description="Additional asset-specific metadata")] = None


class FeedFormat(Enum):
    google_merchant_center = "google_merchant_center"
    facebook_catalog = "facebook_catalog"
    custom = "custom"


class UpdateFrequency(Enum):
    realtime = "realtime"
    hourly = "hourly"
    daily = "daily"
    weekly = "weekly"


class ProductCatalog(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    feed_url: Annotated[AnyUrl, Field(description="URL to product catalog feed")]
    feed_format: Annotated[FeedFormat | None, Field(description="Format of the product feed")] = (
        "google_merchant_center"
    )
    categories: Annotated[
        list[str] | None, Field(description="Product categories available in the catalog (for filtering)")
    ] = None
    last_updated: Annotated[AwareDatetime | None, Field(description="When the product catalog was last updated")] = (
        None
    )
    update_frequency: Annotated[
        UpdateFrequency | None, Field(description="How frequently the product catalog is updated")
    ] = None


class Disclaimer(BaseModel):
    text: Annotated[str, Field(description="Disclaimer text")]
    context: Annotated[
        str | None,
        Field(description="When this disclaimer applies (e.g., 'financial_products', 'health_claims', 'all')"),
    ] = None
    required: Annotated[bool | None, Field(description="Whether this disclaimer must appear")] = True


class Contact(BaseModel):
    email: Annotated[EmailStr | None, Field(description="Contact email")] = None
    phone: Annotated[str | None, Field(description="Contact phone number")] = None


class Metadata(BaseModel):
    created_date: Annotated[AwareDatetime | None, Field(description="When this brand manifest was created")] = None
    updated_date: Annotated[AwareDatetime | None, Field(description="When this brand manifest was last updated")] = (
        None
    )
    version: Annotated[str | None, Field(description="Brand card version number")] = None


class BrandManifest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl,
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ]
    name: Annotated[str | None, Field(description="Brand or business name")] = None
    logos: Annotated[
        list[Logo] | None, Field(description="Brand logo assets with semantic tags for different use cases")
    ] = None
    colors: Annotated[Colors | None, Field(description="Brand color palette")] = None
    fonts: Annotated[Fonts | None, Field(description="Brand typography guidelines")] = None
    tone: Annotated[
        str | None,
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[str | None, Field(description="Brand tagline or slogan")] = None
    assets: Annotated[
        list[Asset] | None,
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        ProductCatalog | None,
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        list[Disclaimer] | None,
        Field(description="Legal disclaimers or required text that must appear in creatives"),
    ] = None
    industry: Annotated[
        str | None, Field(description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')")
    ] = None
    target_audience: Annotated[str | None, Field(description="Primary target audience description")] = None
    contact: Annotated[Contact | None, Field(description="Brand contact information")] = None
    metadata: Annotated[Metadata | None, Field(description="Additional brand metadata")] = None


class Asset8(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[str, Field(description="Unique identifier for this asset")]
    asset_type: Annotated[AssetType, Field(description="Type of asset")]
    url: Annotated[AnyUrl, Field(description="URL to CDN-hosted asset file")]
    tags: Annotated[
        list[str] | None,
        Field(description="Tags for asset discovery (e.g., 'holiday', 'lifestyle', 'product_shot')"),
    ] = None
    name: Annotated[str | None, Field(description="Human-readable asset name")] = None
    description: Annotated[str | None, Field(description="Asset description or usage notes")] = None
    width: Annotated[int | None, Field(description="Image/video width in pixels")] = None
    height: Annotated[int | None, Field(description="Image/video height in pixels")] = None
    duration_seconds: Annotated[float | None, Field(description="Video/audio duration in seconds")] = None
    file_size_bytes: Annotated[int | None, Field(description="File size in bytes")] = None
    format: Annotated[str | None, Field(description="File format (e.g., 'jpg', 'mp4', 'mp3')")] = None
    metadata: Annotated[dict[str, Any] | None, Field(description="Additional asset-specific metadata")] = None


class ProductCatalog5(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    feed_url: Annotated[AnyUrl, Field(description="URL to product catalog feed")]
    feed_format: Annotated[FeedFormat | None, Field(description="Format of the product feed")] = (
        "google_merchant_center"
    )
    categories: Annotated[
        list[str] | None, Field(description="Product categories available in the catalog (for filtering)")
    ] = None
    last_updated: Annotated[AwareDatetime | None, Field(description="When the product catalog was last updated")] = (
        None
    )
    update_frequency: Annotated[
        UpdateFrequency | None, Field(description="How frequently the product catalog is updated")
    ] = None


class BrandManifest4(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl | None,
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ] = None
    name: Annotated[str, Field(description="Brand or business name")]
    logos: Annotated[
        list[Logo] | None, Field(description="Brand logo assets with semantic tags for different use cases")
    ] = None
    colors: Annotated[Colors | None, Field(description="Brand color palette")] = None
    fonts: Annotated[Fonts | None, Field(description="Brand typography guidelines")] = None
    tone: Annotated[
        str | None,
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[str | None, Field(description="Brand tagline or slogan")] = None
    assets: Annotated[
        list[Asset8] | None,
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        ProductCatalog5 | None,
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        list[Disclaimer] | None,
        Field(description="Legal disclaimers or required text that must appear in creatives"),
    ] = None
    industry: Annotated[
        str | None, Field(description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')")
    ] = None
    target_audience: Annotated[str | None, Field(description="Primary target audience description")] = None
    contact: Annotated[Contact | None, Field(description="Brand contact information")] = None
    metadata: Annotated[Metadata | None, Field(description="Additional brand metadata")] = None


class Scheme(Enum):
    bearer = "Bearer"
    hmac_sha256 = "HMAC-SHA256"


class Authentication(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    schemes: Annotated[
        list[Scheme],
        Field(
            description="Array of authentication schemes. Supported: ['Bearer'] for simple token auth, ['HMAC-SHA256'] for signature verification (recommended for production)",
            max_length=1,
            min_length=1,
        ),
    ]
    credentials: Annotated[
        str,
        Field(
            description="Credentials for authentication. For Bearer: token sent in Authorization header. For HMAC-SHA256: shared secret used to generate signature. Minimum 32 characters. Exchanged out-of-band during onboarding.",
            min_length=32,
        ),
    ]


class ReportingFrequency(Enum):
    hourly = "hourly"
    daily = "daily"
    monthly = "monthly"


class RequestedMetric(Enum):
    impressions = "impressions"
    spend = "spend"
    clicks = "clicks"
    ctr = "ctr"
    video_completions = "video_completions"
    completion_rate = "completion_rate"
    conversions = "conversions"
    viewability = "viewability"
    engagement_rate = "engagement_rate"


class ReportingWebhook(BaseModel):
    url: Annotated[AnyUrl, Field(description="Webhook endpoint URL for task status notifications")]
    token: Annotated[
        str | None,
        Field(
            description="Optional client-provided token for webhook validation. Echoed back in webhook payload to validate request authenticity.",
            min_length=16,
        ),
    ] = None
    authentication: Annotated[
        Authentication, Field(description="Authentication configuration for webhook delivery (A2A-compatible)")
    ]
    reporting_frequency: Annotated[
        ReportingFrequency,
        Field(
            description="Frequency for automated reporting delivery. Must be supported by all products in the media buy."
        ),
    ]
    requested_metrics: Annotated[
        list[RequestedMetric] | None,
        Field(
            description="Optional list of metrics to include in webhook notifications. If omitted, all available metrics are included. Must be subset of product's available_metrics."
        ),
    ] = None


class CreateMediaBuyRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    adcp_version: Annotated[
        str | None, Field(description="AdCP schema version for this request", pattern="^\\d+\\.\\d+\\.\\d+$")
    ] = "1.6.1"
    buyer_ref: Annotated[str, Field(description="Buyer's reference identifier for this media buy")]
    packages: Annotated[list[Packages | Packages1], Field(description="Array of package configurations")]
    brand_manifest: Annotated[
        BrandManifest | BrandManifest4 | AnyUrl,
        Field(
            description="Brand manifest provided either as an inline object or a URL string pointing to a hosted manifest",
            examples=[
                {
                    "description": "Inline brand manifest",
                    "data": {
                        "url": "https://acmecorp.com",
                        "name": "ACME Corporation",
                        "colors": {"primary": "#FF6B35"},
                    },
                },
                {
                    "description": "URL string reference to hosted manifest",
                    "data": "https://cdn.acmecorp.com/brand-manifest.json",
                },
            ],
            title="Brand Manifest Reference",
        ),
    ]
    promoted_offering: Annotated[
        str | None,
        Field(
            description="DEPRECATED: Use brand_manifest instead. Legacy field for describing what is being promoted."
        ),
    ] = None
    po_number: Annotated[str | None, Field(description="Purchase order number for tracking")] = None
    start_time: Annotated[
        str | AwareDatetime,
        Field(description="Campaign start timing: 'asap' or ISO 8601 date-time", title="Start Timing"),
    ]
    end_time: Annotated[AwareDatetime, Field(description="Campaign end date/time in ISO 8601 format")]
    budget: Annotated[
        float,
        Field(
            description="Total budget for this media buy. Currency is determined by the pricing_option_id selected in each package.",
            ge=0.0,
        ),
    ]
    reporting_webhook: ReportingWebhook | None = None
