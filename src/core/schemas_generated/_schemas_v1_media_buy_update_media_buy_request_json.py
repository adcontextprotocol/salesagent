# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_update-media-buy-request_json.json
#   source_etag: W/"68f9296c-b2c"
#   source_last_modified: Wed, 22 Oct 2025 18:58:52 GMT

from __future__ import annotations

from enum import Enum
from typing import Annotated, Union

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class GeoCountryAnyOfItem(RootModel[str]):
    root: Annotated[str, Field(pattern="^[A-Z]{2}$")]


class FrequencyCap(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    suppress_minutes: Annotated[float, Field(description="Minutes to suppress after impression", ge=0.0)]


class TargetingOverlay(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    geo_country_any_of: Annotated[
        list[GeoCountryAnyOfItem] | None,
        Field(
            description="Restrict delivery to specific countries (ISO codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_region_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific regions/states. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_metro_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific metro areas (DMA codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_postal_code_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific postal/ZIP codes. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    frequency_cap: Annotated[
        FrequencyCap | None,
        Field(description="Frequency capping settings for package-level application", title="Frequency Cap"),
    ] = None


class Packages(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    package_id: Annotated[str, Field(description="Publisher's ID of package to update")]
    buyer_ref: Annotated[str | None, Field(description="Buyer's reference for the package to update")] = None
    budget: Annotated[
        float | None,
        Field(
            description="Updated budget allocation for this package in the currency specified by the pricing option",
            ge=0.0,
        ),
    ] = None
    active: Annotated[bool | None, Field(description="Pause/resume specific package")] = None
    targeting_overlay: Annotated[
        TargetingOverlay | None,
        Field(
            description="Optional geographic refinements for media buys. Most targeting should be expressed in the brief and handled by the publisher. These fields are primarily for geographic restrictions (RCT testing, regulatory compliance).",
            title="Targeting Overlay",
        ),
    ] = None
    creative_ids: Annotated[list[str] | None, Field(description="Update creative assignments")] = None


class TargetingOverlay5(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    geo_country_any_of: Annotated[
        list[GeoCountryAnyOfItem] | None,
        Field(
            description="Restrict delivery to specific countries (ISO codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_region_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific regions/states. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_metro_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific metro areas (DMA codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_postal_code_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific postal/ZIP codes. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    frequency_cap: Annotated[
        FrequencyCap | None,
        Field(description="Frequency capping settings for package-level application", title="Frequency Cap"),
    ] = None


class Packages1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    package_id: Annotated[str | None, Field(description="Publisher's ID of package to update")] = None
    buyer_ref: Annotated[str, Field(description="Buyer's reference for the package to update")]
    budget: Annotated[
        float | None,
        Field(
            description="Updated budget allocation for this package in the currency specified by the pricing option",
            ge=0.0,
        ),
    ] = None
    active: Annotated[bool | None, Field(description="Pause/resume specific package")] = None
    targeting_overlay: Annotated[
        TargetingOverlay5 | None,
        Field(
            description="Optional geographic refinements for media buys. Most targeting should be expressed in the brief and handled by the publisher. These fields are primarily for geographic restrictions (RCT testing, regulatory compliance).",
            title="Targeting Overlay",
        ),
    ] = None
    creative_ids: Annotated[list[str] | None, Field(description="Update creative assignments")] = None


class Scheme(Enum):
    bearer = "Bearer"
    hmac_sha256 = "HMAC-SHA256"


class Authentication(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    schemes: Annotated[
        list[Scheme],
        Field(
            description="Array of authentication schemes. Supported: ['Bearer'] for simple token auth, ['HMAC-SHA256'] for signature verification (recommended for production)",
            max_length=1,
            min_length=1,
        ),
    ]
    credentials: Annotated[
        str,
        Field(
            description="Credentials for authentication. For Bearer: token sent in Authorization header. For HMAC-SHA256: shared secret used to generate signature. Minimum 32 characters. Exchanged out-of-band during onboarding.",
            min_length=32,
        ),
    ]


class PushNotificationConfig(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl, Field(description="Webhook endpoint URL for task status notifications")]
    token: Annotated[
        str | None,
        Field(
            description="Optional client-provided token for webhook validation. Echoed back in webhook payload to validate request authenticity.",
            min_length=16,
        ),
    ] = None
    authentication: Annotated[
        Authentication, Field(description="Authentication configuration for webhook delivery (A2A-compatible)")
    ]


class UpdateMediaBuyRequest1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    media_buy_id: Annotated[str, Field(description="Publisher's ID of the media buy to update")]
    buyer_ref: Annotated[str | None, Field(description="Buyer's reference for the media buy to update")] = None
    active: Annotated[bool | None, Field(description="Pause/resume the entire media buy")] = None
    start_time: Annotated[
        str | AwareDatetime | None,
        Field(description="Campaign start timing: 'asap' or ISO 8601 date-time", title="Start Timing"),
    ] = None
    end_time: Annotated[AwareDatetime | None, Field(description="New end date/time in ISO 8601 format")] = None
    budget: Annotated[
        float | None,
        Field(
            description="Updated total budget for this media buy. Currency is determined by the pricing_option_id selected in each package.",
            ge=0.0,
        ),
    ] = None
    packages: Annotated[list[Packages | Packages1] | None, Field(description="Package-specific updates")] = (
        None
    )
    push_notification_config: Annotated[
        PushNotificationConfig | None,
        Field(
            description="Webhook configuration for asynchronous task notifications. Uses A2A-compatible PushNotificationConfig structure. Supports Bearer tokens (simple) or HMAC signatures (production-recommended).",
            title="Push Notification Config",
        ),
    ] = None


class TargetingOverlay6(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    geo_country_any_of: Annotated[
        list[GeoCountryAnyOfItem] | None,
        Field(
            description="Restrict delivery to specific countries (ISO codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_region_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific regions/states. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_metro_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific metro areas (DMA codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_postal_code_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific postal/ZIP codes. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    frequency_cap: Annotated[
        FrequencyCap | None,
        Field(description="Frequency capping settings for package-level application", title="Frequency Cap"),
    ] = None


class Packages2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    package_id: Annotated[str, Field(description="Publisher's ID of package to update")]
    buyer_ref: Annotated[str | None, Field(description="Buyer's reference for the package to update")] = None
    budget: Annotated[
        float | None,
        Field(
            description="Updated budget allocation for this package in the currency specified by the pricing option",
            ge=0.0,
        ),
    ] = None
    active: Annotated[bool | None, Field(description="Pause/resume specific package")] = None
    targeting_overlay: Annotated[
        TargetingOverlay6 | None,
        Field(
            description="Optional geographic refinements for media buys. Most targeting should be expressed in the brief and handled by the publisher. These fields are primarily for geographic restrictions (RCT testing, regulatory compliance).",
            title="Targeting Overlay",
        ),
    ] = None
    creative_ids: Annotated[list[str] | None, Field(description="Update creative assignments")] = None


class TargetingOverlay7(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    geo_country_any_of: Annotated[
        list[GeoCountryAnyOfItem] | None,
        Field(
            description="Restrict delivery to specific countries (ISO codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_region_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific regions/states. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_metro_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific metro areas (DMA codes). Use for regulatory compliance or RCT testing."
        ),
    ] = None
    geo_postal_code_any_of: Annotated[
        list[str] | None,
        Field(
            description="Restrict delivery to specific postal/ZIP codes. Use for regulatory compliance or RCT testing."
        ),
    ] = None
    frequency_cap: Annotated[
        FrequencyCap | None,
        Field(description="Frequency capping settings for package-level application", title="Frequency Cap"),
    ] = None


class Packages3(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    package_id: Annotated[str | None, Field(description="Publisher's ID of package to update")] = None
    buyer_ref: Annotated[str, Field(description="Buyer's reference for the package to update")]
    budget: Annotated[
        float | None,
        Field(
            description="Updated budget allocation for this package in the currency specified by the pricing option",
            ge=0.0,
        ),
    ] = None
    active: Annotated[bool | None, Field(description="Pause/resume specific package")] = None
    targeting_overlay: Annotated[
        TargetingOverlay7 | None,
        Field(
            description="Optional geographic refinements for media buys. Most targeting should be expressed in the brief and handled by the publisher. These fields are primarily for geographic restrictions (RCT testing, regulatory compliance).",
            title="Targeting Overlay",
        ),
    ] = None
    creative_ids: Annotated[list[str] | None, Field(description="Update creative assignments")] = None


class Authentication5(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    schemes: Annotated[
        list[Scheme],
        Field(
            description="Array of authentication schemes. Supported: ['Bearer'] for simple token auth, ['HMAC-SHA256'] for signature verification (recommended for production)",
            max_length=1,
            min_length=1,
        ),
    ]
    credentials: Annotated[
        str,
        Field(
            description="Credentials for authentication. For Bearer: token sent in Authorization header. For HMAC-SHA256: shared secret used to generate signature. Minimum 32 characters. Exchanged out-of-band during onboarding.",
            min_length=32,
        ),
    ]


class PushNotificationConfig3(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl, Field(description="Webhook endpoint URL for task status notifications")]
    token: Annotated[
        str | None,
        Field(
            description="Optional client-provided token for webhook validation. Echoed back in webhook payload to validate request authenticity.",
            min_length=16,
        ),
    ] = None
    authentication: Annotated[
        Authentication5, Field(description="Authentication configuration for webhook delivery (A2A-compatible)")
    ]


class UpdateMediaBuyRequest2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    media_buy_id: Annotated[str | None, Field(description="Publisher's ID of the media buy to update")] = None
    buyer_ref: Annotated[str, Field(description="Buyer's reference for the media buy to update")]
    active: Annotated[bool | None, Field(description="Pause/resume the entire media buy")] = None
    start_time: Annotated[
        str | AwareDatetime | None,
        Field(description="Campaign start timing: 'asap' or ISO 8601 date-time", title="Start Timing"),
    ] = None
    end_time: Annotated[AwareDatetime | None, Field(description="New end date/time in ISO 8601 format")] = None
    budget: Annotated[
        float | None,
        Field(
            description="Updated total budget for this media buy. Currency is determined by the pricing_option_id selected in each package.",
            ge=0.0,
        ),
    ] = None
    packages: Annotated[list[Packages2 | Packages3] | None, Field(description="Package-specific updates")] = (
        None
    )
    push_notification_config: Annotated[
        PushNotificationConfig3 | None,
        Field(
            description="Webhook configuration for asynchronous task notifications. Uses A2A-compatible PushNotificationConfig structure. Supports Bearer tokens (simple) or HMAC signatures (production-recommended).",
            title="Push Notification Config",
        ),
    ] = None


class UpdateMediaBuyRequest(RootModel[Union[UpdateMediaBuyRequest1, UpdateMediaBuyRequest2]]):
    root: Annotated[
        UpdateMediaBuyRequest1 | UpdateMediaBuyRequest2,
        Field(
            description="Request parameters for updating campaign and package settings",
            title="Update Media Buy Request",
        ),
    ]
