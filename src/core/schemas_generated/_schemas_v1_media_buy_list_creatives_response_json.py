# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_list-creatives-response_json.json
#   timestamp: 2025-10-15T00:10:51+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Literal

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field


class Direction(Enum):
    asc = "asc"
    desc = "desc"


class SortApplied(BaseModel):
    field: str | None = None
    direction: Direction | None = None


class QuerySummary(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    total_matching: Annotated[
        int, Field(description="Total number of creatives matching filters (across all pages)", ge=0)
    ]
    returned: Annotated[int, Field(description="Number of creatives returned in this response", ge=0)]
    filters_applied: Annotated[
        list[str] | None, Field(description="List of filters that were applied to the query")
    ] = None
    sort_applied: Annotated[SortApplied | None, Field(description="Sort order that was applied")] = None


class Pagination(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    limit: Annotated[int, Field(description="Maximum number of results requested", ge=1)]
    offset: Annotated[int, Field(description="Number of results skipped", ge=0)]
    has_more: Annotated[bool, Field(description="Whether more results are available")]
    total_pages: Annotated[int | None, Field(description="Total number of pages available", ge=0)] = None
    current_page: Annotated[int | None, Field(description="Current page number (1-based)", ge=1)] = None


class FormatId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    agent_url: Annotated[
        AnyUrl,
        Field(
            description="URL of the agent that defines this format (e.g., 'https://creatives.adcontextprotocol.org' for standard formats, or 'https://publisher.com/.well-known/adcp/sales' for custom formats)"
        ),
    ]
    id: Annotated[
        str,
        Field(
            description="Format identifier within the agent's namespace (e.g., 'display_300x250', 'video_standard_30s')",
            pattern="^[a-zA-Z0-9_-]+$",
        ),
    ]


class Status(Enum):
    processing = "processing"
    approved = "approved"
    rejected = "rejected"
    pending_review = "pending_review"


class Assets(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["image"]
    url: Annotated[AnyUrl, Field(description="URL to the image asset")]
    width: Annotated[int | None, Field(description="Image width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Image height in pixels", ge=1)] = None
    format: Annotated[str | None, Field(description="Image file format (jpg, png, gif, webp, etc.)")] = None
    alt_text: Annotated[str | None, Field(description="Alternative text for accessibility")] = None


class Assets77(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["video"]
    url: Annotated[AnyUrl, Field(description="URL to the video asset")]
    width: Annotated[int | None, Field(description="Video width in pixels", ge=1)] = None
    height: Annotated[int | None, Field(description="Video height in pixels", ge=1)] = None
    duration_ms: Annotated[int | None, Field(description="Video duration in milliseconds", ge=0)] = None
    format: Annotated[str | None, Field(description="Video file format (mp4, webm, mov, etc.)")] = None
    bitrate_kbps: Annotated[int | None, Field(description="Video bitrate in kilobits per second", ge=1)] = None


class Assets78(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["audio"]
    url: Annotated[AnyUrl, Field(description="URL to the audio asset")]
    duration_ms: Annotated[int | None, Field(description="Audio duration in milliseconds", ge=0)] = None
    format: Annotated[str | None, Field(description="Audio file format (mp3, wav, aac, etc.)")] = None
    bitrate_kbps: Annotated[int | None, Field(description="Audio bitrate in kilobits per second", ge=1)] = None


class Assets79(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["text"]
    content: Annotated[str, Field(description="Text content")]
    max_length: Annotated[int | None, Field(description="Maximum character length constraint", ge=1)] = None
    language: Annotated[str | None, Field(description="Language code (e.g., 'en', 'es', 'fr')")] = None


class Assets80(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["html"]
    content: Annotated[str, Field(description="HTML content")]
    version: Annotated[str | None, Field(description="HTML version (e.g., 'HTML5')")] = None


class Assets81(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["css"]
    content: Annotated[str, Field(description="CSS content")]
    media: Annotated[str | None, Field(description="CSS media query context (e.g., 'screen', 'print')")] = None


class ModuleType(Enum):
    esm = "esm"
    commonjs = "commonjs"
    script = "script"


class Assets82(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["javascript"]
    content: Annotated[str, Field(description="JavaScript content")]
    module_type: Annotated[ModuleType | None, Field(description="JavaScript module type")] = None


class VastVersion(Enum):
    field_2_0 = "2.0"
    field_3_0 = "3.0"
    field_4_0 = "4.0"
    field_4_1 = "4.1"
    field_4_2 = "4.2"


class TrackingEvent(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    click = "click"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"
    fullscreen = "fullscreen"
    exit_fullscreen = "exitFullscreen"
    player_expand = "playerExpand"
    player_collapse = "playerCollapse"


class Assets83(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns VAST XML")]
    content: Annotated[str | None, Field(description="Inline VAST XML content")] = None
    vast_version: Annotated[VastVersion | None, Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        bool | None, Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        int | None, Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent] | None, Field(description="Tracking events supported by this VAST tag")
    ] = None


class Assets84(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[AnyUrl | None, Field(description="URL endpoint that returns VAST XML")] = None
    content: Annotated[str, Field(description="Inline VAST XML content")]
    vast_version: Annotated[VastVersion | None, Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        bool | None, Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        int | None, Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent] | None, Field(description="Tracking events supported by this VAST tag")
    ] = None


class DaastVersion(Enum):
    field_1_0 = "1.0"
    field_1_1 = "1.1"


class TrackingEvent26(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"


class Assets85(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns DAAST XML")]
    content: Annotated[str | None, Field(description="Inline DAAST XML content")] = None
    daast_version: Annotated[DaastVersion | None, Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent26] | None, Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[bool | None, Field(description="Whether companion display ads are included")] = None


class Assets86(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[AnyUrl | None, Field(description="URL endpoint that returns DAAST XML")] = None
    content: Annotated[str, Field(description="Inline DAAST XML content")]
    daast_version: Annotated[DaastVersion | None, Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        int | None, Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        list[TrackingEvent26] | None, Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[bool | None, Field(description="Whether companion display ads are included")] = None


class Colors(BaseModel):
    primary: str | None = None
    secondary: str | None = None
    accent: str | None = None


class Assets87(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["promoted_offerings"]
    url: Annotated[
        AnyUrl | None, Field(description="URL of the advertiser's brand or offering (e.g., https://retailer.com)")
    ] = None
    colors: Annotated[Colors | None, Field(description="Brand colors")] = None
    fonts: Annotated[list[str] | None, Field(description="Brand fonts")] = None
    tone: Annotated[str | None, Field(description="Brand tone/voice")] = None


class Assets88(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["url"]
    url: Annotated[AnyUrl, Field(description="URL reference")]
    description: Annotated[str | None, Field(description="Description of what this URL points to")] = None


class Status9(Enum):
    active = "active"
    paused = "paused"
    ended = "ended"


class AssignedPackage(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    package_id: Annotated[str, Field(description="Package identifier")]
    package_name: Annotated[str | None, Field(description="Human-readable package name")] = None
    assigned_date: Annotated[AwareDatetime, Field(description="When this assignment was created")]
    status: Annotated[Status9, Field(description="Status of this specific assignment")]


class Assignments(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    assignment_count: Annotated[int, Field(description="Total number of active package assignments", ge=0)]
    assigned_packages: Annotated[
        list[AssignedPackage] | None, Field(description="List of packages this creative is assigned to")
    ] = None


class Performance(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    impressions: Annotated[int | None, Field(description="Total impressions across all assignments", ge=0)] = None
    clicks: Annotated[int | None, Field(description="Total clicks across all assignments", ge=0)] = None
    ctr: Annotated[float | None, Field(description="Click-through rate (clicks/impressions)", ge=0.0, le=1.0)] = None
    conversion_rate: Annotated[
        float | None, Field(description="Conversion rate across all assignments", ge=0.0, le=1.0)
    ] = None
    performance_score: Annotated[
        float | None, Field(description="Aggregated performance score (0-100)", ge=0.0, le=100.0)
    ] = None
    last_updated: Annotated[AwareDatetime, Field(description="When performance data was last updated")]


class SubAssets(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Annotated[
        str,
        Field(
            description="Type of asset. Common types: headline, body_text, thumbnail_image, product_image, featured_image, logo, cta_text, price_text, sponsor_name, author_name, click_url"
        ),
    ]
    asset_id: Annotated[str, Field(description="Unique identifier for the asset within the creative")]
    content_uri: Annotated[AnyUrl, Field(description="URL for media assets (images, videos, etc.)")]
    content: Annotated[
        str | list[str] | None,
        Field(description="Text content for text-based assets like headlines, body text, CTA text, etc."),
    ] = None


class SubAssets1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Annotated[
        str,
        Field(
            description="Type of asset. Common types: headline, body_text, thumbnail_image, product_image, featured_image, logo, cta_text, price_text, sponsor_name, author_name, click_url"
        ),
    ]
    asset_id: Annotated[str, Field(description="Unique identifier for the asset within the creative")]
    content_uri: Annotated[AnyUrl | None, Field(description="URL for media assets (images, videos, etc.)")] = None
    content: Annotated[
        str | list[str],
        Field(description="Text content for text-based assets like headlines, body text, CTA text, etc."),
    ]


class Creative(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Unique identifier for the creative")]
    name: Annotated[str, Field(description="Human-readable creative name")]
    format_id: Annotated[
        FormatId, Field(description="Structured format identifier with agent URL and format name", title="Format ID")
    ]
    status: Annotated[Status, Field(description="Status of a creative asset", title="Creative Status")]
    created_date: Annotated[AwareDatetime, Field(description="When the creative was uploaded to the library")]
    updated_date: Annotated[AwareDatetime, Field(description="When the creative was last modified")]
    media_url: Annotated[AnyUrl | None, Field(description="URL of the creative file (for hosted assets)")] = None
    assets: Annotated[
        dict[str, Assets | Assets77 | Assets78 | Assets79 | Assets80 | Assets81 | Assets82 | Assets83 | Assets84 | Assets85 | Assets86 | Assets87 | Assets88] | None,
        Field(description="Assets for this creative, keyed by asset_role"),
    ] = None
    click_url: Annotated[AnyUrl | None, Field(description="Landing page URL for the creative")] = None
    duration: Annotated[float | None, Field(description="Duration in milliseconds (for video/audio)", ge=0.0)] = None
    width: Annotated[float | None, Field(description="Width in pixels (for video/display)", ge=0.0)] = None
    height: Annotated[float | None, Field(description="Height in pixels (for video/display)", ge=0.0)] = None
    tags: Annotated[list[str] | None, Field(description="User-defined tags for organization and searchability")] = (
        None
    )
    assignments: Annotated[
        Assignments | None, Field(description="Current package assignments (included when include_assignments=true)")
    ] = None
    performance: Annotated[
        Performance | None,
        Field(description="Aggregated performance metrics (included when include_performance=true)"),
    ] = None
    sub_assets: Annotated[
        list[SubAssets | SubAssets1] | None,
        Field(description="Sub-assets for multi-asset formats (included when include_sub_assets=true)"),
    ] = None


class StatusSummary(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    approved: Annotated[int | None, Field(description="Number of approved creatives", ge=0)] = None
    pending_review: Annotated[int | None, Field(description="Number of creatives pending review", ge=0)] = None
    rejected: Annotated[int | None, Field(description="Number of rejected creatives", ge=0)] = None
    archived: Annotated[int | None, Field(description="Number of archived creatives", ge=0)] = None


class ListCreativesResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    query_summary: Annotated[QuerySummary, Field(description="Summary of the query that was executed")]
    pagination: Annotated[Pagination, Field(description="Pagination information for navigating results")]
    creatives: Annotated[list[Creative], Field(description="Array of creative assets matching the query")]
    format_summary: Annotated[dict[str, int] | None, Field(description="Breakdown of creatives by format type")] = (
        None
    )
    status_summary: Annotated[StatusSummary | None, Field(description="Breakdown of creatives by status")] = None
