# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_list-creatives-request_json.json
#   source_etag: W/"68f98531-199d"
#   source_last_modified: Thu, 23 Oct 2025 01:30:25 GMT

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class Status(Enum):
    processing = "processing"
    approved = "approved"
    rejected = "rejected"
    pending_review = "pending_review"


class Filters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    format: Annotated[str | None, Field(description="Filter by creative format type (e.g., video, audio, display)")] = (
        None
    )
    formats: Annotated[list[str] | None, Field(description="Filter by multiple creative format types")] = None
    status: Annotated[Status | None, Field(description="Status of a creative asset", title="Creative Status")] = None
    statuses: Annotated[list[Any] | None, Field(description="Filter by multiple creative statuses")] = None
    tags: Annotated[list[str] | None, Field(description="Filter by creative tags (all tags must match)")] = None
    tags_any: Annotated[list[str] | None, Field(description="Filter by creative tags (any tag must match)")] = None
    name_contains: Annotated[
        str | None, Field(description="Filter by creative names containing this text (case-insensitive)")
    ] = None
    creative_ids: Annotated[list[str] | None, Field(description="Filter by specific creative IDs", max_length=100)] = (
        None
    )
    created_after: Annotated[
        AwareDatetime | None, Field(description="Filter creatives created after this date (ISO 8601)")
    ] = None
    created_before: Annotated[
        AwareDatetime | None, Field(description="Filter creatives created before this date (ISO 8601)")
    ] = None
    updated_after: Annotated[
        AwareDatetime | None, Field(description="Filter creatives last updated after this date (ISO 8601)")
    ] = None
    updated_before: Annotated[
        AwareDatetime | None, Field(description="Filter creatives last updated before this date (ISO 8601)")
    ] = None
    assigned_to_package: Annotated[
        str | None, Field(description="Filter creatives assigned to this specific package")
    ] = None
    assigned_to_packages: Annotated[
        list[str] | None, Field(description="Filter creatives assigned to any of these packages")
    ] = None
    unassigned: Annotated[
        bool | None, Field(description="Filter for unassigned creatives when true, assigned creatives when false")
    ] = None
    has_performance_data: Annotated[
        bool | None, Field(description="Filter creatives that have performance data when true")
    ] = None


class FieldModel(Enum):
    created_date = "created_date"
    updated_date = "updated_date"
    name = "name"
    status = "status"
    assignment_count = "assignment_count"
    performance_score = "performance_score"


class Direction(Enum):
    asc = "asc"
    desc = "desc"


class Sort(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    field: Annotated[FieldModel | None, Field(description="Field to sort by")] = "created_date"
    direction: Annotated[Direction | None, Field(description="Sort direction")] = "desc"


class Pagination(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    limit: Annotated[int | None, Field(description="Maximum number of creatives to return", ge=1, le=100)] = 50
    offset: Annotated[int | None, Field(description="Number of creatives to skip", ge=0)] = 0


class Field1(Enum):
    creative_id = "creative_id"
    name = "name"
    format = "format"
    status = "status"
    created_date = "created_date"
    updated_date = "updated_date"
    tags = "tags"
    assignments = "assignments"
    performance = "performance"
    sub_assets = "sub_assets"


class ListCreativesRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    filters: Annotated[Filters | None, Field(description="Filter criteria for querying creatives")] = None
    sort: Annotated[Sort | None, Field(description="Sorting parameters")] = None
    pagination: Annotated[Pagination | None, Field(description="Pagination parameters")] = None
    include_assignments: Annotated[
        bool | None, Field(description="Include package assignment information in response")
    ] = True
    include_performance: Annotated[
        bool | None, Field(description="Include aggregated performance metrics in response")
    ] = False
    include_sub_assets: Annotated[
        bool | None, Field(description="Include sub-assets (for carousel/native formats) in response")
    ] = False
    fields: Annotated[
        list[Field1] | None, Field(description="Specific fields to include in response (omit for all fields)")
    ] = None
