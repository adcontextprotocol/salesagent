# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_sync-creatives-response_json.json
#   source_etag: W/"68f98531-c4b"
#   source_last_modified: Thu, 23 Oct 2025 01:30:25 GMT

from __future__ import annotations

from enum import Enum
from typing import Annotated

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field


class Action(Enum):
    created = "created"
    updated = "updated"
    unchanged = "unchanged"
    failed = "failed"
    deleted = "deleted"


class Creative(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Creative ID from the request")]
    action: Annotated[Action, Field(description="Action taken for this creative")]
    platform_id: Annotated[str | None, Field(description="Platform-specific ID assigned to the creative")] = None
    changes: Annotated[
        list[str] | None, Field(description="Field names that were modified (only present when action='updated')")
    ] = None
    errors: Annotated[
        list[str] | None, Field(description="Validation or processing errors (only present when action='failed')")
    ] = None
    warnings: Annotated[list[str] | None, Field(description="Non-fatal warnings about this creative")] = None
    preview_url: Annotated[
        AnyUrl | None, Field(description="Preview URL for generative creatives (only present for generative formats)")
    ] = None
    expires_at: Annotated[
        AwareDatetime | None,
        Field(description="ISO 8601 timestamp when preview link expires (only present when preview_url exists)"),
    ] = None
    assigned_to: Annotated[
        list[str] | None,
        Field(
            description="Package IDs this creative was successfully assigned to (only present when assignments were requested)"
        ),
    ] = None
    assignment_errors: Annotated[
        dict[str, str] | None,
        Field(description="Assignment errors by package ID (only present when assignment failures occurred)"),
    ] = None


class SyncCreativesResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    dry_run: Annotated[bool | None, Field(description="Whether this was a dry run (no actual changes made)")] = None
    creatives: Annotated[list[Creative], Field(description="Results for each creative processed")]
