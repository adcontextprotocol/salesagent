# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_get-products-request_json.json
#   source_etag: W/"68f9296c-7b9"
#   source_last_modified: Wed, 22 Oct 2025 18:58:52 GMT

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, EmailStr, Field


class Logo(BaseModel):
    url: Annotated[AnyUrl, Field(description="URL to the logo asset")]
    tags: Annotated[
        list[str] | None,
        Field(
            description="Semantic tags describing the logo variant (e.g., 'dark', 'light', 'square', 'horizontal', 'icon')"
        ),
    ] = None
    width: Annotated[int | None, Field(description="Logo width in pixels")] = None
    height: Annotated[int | None, Field(description="Logo height in pixels")] = None


class Colors(BaseModel):
    primary: Annotated[
        str | None, Field(description="Primary brand color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    secondary: Annotated[
        str | None, Field(description="Secondary brand color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    accent: Annotated[str | None, Field(description="Accent color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")] = None
    background: Annotated[
        str | None, Field(description="Background color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")
    ] = None
    text: Annotated[str | None, Field(description="Text color (hex format)", pattern="^#[0-9A-Fa-f]{6}$")] = None


class Fonts(BaseModel):
    primary: Annotated[str | None, Field(description="Primary font family name")] = None
    secondary: Annotated[str | None, Field(description="Secondary font family name")] = None
    font_urls: Annotated[list[AnyUrl] | None, Field(description="URLs to web font files if using custom fonts")] = None


class AssetType(Enum):
    image = "image"
    video = "video"
    audio = "audio"
    text = "text"


class Asset(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[str, Field(description="Unique identifier for this asset")]
    asset_type: Annotated[AssetType, Field(description="Type of asset")]
    url: Annotated[AnyUrl, Field(description="URL to CDN-hosted asset file")]
    tags: Annotated[
        list[str] | None,
        Field(description="Tags for asset discovery (e.g., 'holiday', 'lifestyle', 'product_shot')"),
    ] = None
    name: Annotated[str | None, Field(description="Human-readable asset name")] = None
    description: Annotated[str | None, Field(description="Asset description or usage notes")] = None
    width: Annotated[int | None, Field(description="Image/video width in pixels")] = None
    height: Annotated[int | None, Field(description="Image/video height in pixels")] = None
    duration_seconds: Annotated[float | None, Field(description="Video/audio duration in seconds")] = None
    file_size_bytes: Annotated[int | None, Field(description="File size in bytes")] = None
    format: Annotated[str | None, Field(description="File format (e.g., 'jpg', 'mp4', 'mp3')")] = None
    metadata: Annotated[dict[str, Any] | None, Field(description="Additional asset-specific metadata")] = None


class FeedFormat(Enum):
    google_merchant_center = "google_merchant_center"
    facebook_catalog = "facebook_catalog"
    custom = "custom"


class UpdateFrequency(Enum):
    realtime = "realtime"
    hourly = "hourly"
    daily = "daily"
    weekly = "weekly"


class ProductCatalog(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    feed_url: Annotated[AnyUrl, Field(description="URL to product catalog feed")]
    feed_format: Annotated[FeedFormat | None, Field(description="Format of the product feed")] = (
        "google_merchant_center"
    )
    categories: Annotated[
        list[str] | None, Field(description="Product categories available in the catalog (for filtering)")
    ] = None
    last_updated: Annotated[AwareDatetime | None, Field(description="When the product catalog was last updated")] = None
    update_frequency: Annotated[
        UpdateFrequency | None, Field(description="How frequently the product catalog is updated")
    ] = None


class Disclaimer(BaseModel):
    text: Annotated[str, Field(description="Disclaimer text")]
    context: Annotated[
        str | None,
        Field(description="When this disclaimer applies (e.g., 'financial_products', 'health_claims', 'all')"),
    ] = None
    required: Annotated[bool | None, Field(description="Whether this disclaimer must appear")] = True


class Contact(BaseModel):
    email: Annotated[EmailStr | None, Field(description="Contact email")] = None
    phone: Annotated[str | None, Field(description="Contact phone number")] = None


class Metadata(BaseModel):
    created_date: Annotated[AwareDatetime | None, Field(description="When this brand manifest was created")] = None
    updated_date: Annotated[AwareDatetime | None, Field(description="When this brand manifest was last updated")] = None
    version: Annotated[str | None, Field(description="Brand card version number")] = None


class BrandManifest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl,
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ]
    name: Annotated[str | None, Field(description="Brand or business name")] = None
    logos: Annotated[
        list[Logo] | None, Field(description="Brand logo assets with semantic tags for different use cases")
    ] = None
    colors: Annotated[Colors | None, Field(description="Brand color palette")] = None
    fonts: Annotated[Fonts | None, Field(description="Brand typography guidelines")] = None
    tone: Annotated[
        str | None,
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[str | None, Field(description="Brand tagline or slogan")] = None
    assets: Annotated[
        list[Asset] | None,
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        ProductCatalog | None,
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        list[Disclaimer] | None,
        Field(description="Legal disclaimers or required text that must appear in creatives"),
    ] = None
    industry: Annotated[
        str | None, Field(description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')")
    ] = None
    target_audience: Annotated[str | None, Field(description="Primary target audience description")] = None
    contact: Annotated[Contact | None, Field(description="Brand contact information")] = None
    metadata: Annotated[Metadata | None, Field(description="Additional brand metadata")] = None


class Asset12(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[str, Field(description="Unique identifier for this asset")]
    asset_type: Annotated[AssetType, Field(description="Type of asset")]
    url: Annotated[AnyUrl, Field(description="URL to CDN-hosted asset file")]
    tags: Annotated[
        list[str] | None,
        Field(description="Tags for asset discovery (e.g., 'holiday', 'lifestyle', 'product_shot')"),
    ] = None
    name: Annotated[str | None, Field(description="Human-readable asset name")] = None
    description: Annotated[str | None, Field(description="Asset description or usage notes")] = None
    width: Annotated[int | None, Field(description="Image/video width in pixels")] = None
    height: Annotated[int | None, Field(description="Image/video height in pixels")] = None
    duration_seconds: Annotated[float | None, Field(description="Video/audio duration in seconds")] = None
    file_size_bytes: Annotated[int | None, Field(description="File size in bytes")] = None
    format: Annotated[str | None, Field(description="File format (e.g., 'jpg', 'mp4', 'mp3')")] = None
    metadata: Annotated[dict[str, Any] | None, Field(description="Additional asset-specific metadata")] = None


class ProductCatalog11(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    feed_url: Annotated[AnyUrl, Field(description="URL to product catalog feed")]
    feed_format: Annotated[FeedFormat | None, Field(description="Format of the product feed")] = (
        "google_merchant_center"
    )
    categories: Annotated[
        list[str] | None, Field(description="Product categories available in the catalog (for filtering)")
    ] = None
    last_updated: Annotated[AwareDatetime | None, Field(description="When the product catalog was last updated")] = None
    update_frequency: Annotated[
        UpdateFrequency | None, Field(description="How frequently the product catalog is updated")
    ] = None


class BrandManifest10(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[
        AnyUrl | None,
        Field(
            description="Primary brand URL for context and asset discovery. Creative agents can infer brand information from this URL."
        ),
    ] = None
    name: Annotated[str, Field(description="Brand or business name")]
    logos: Annotated[
        list[Logo] | None, Field(description="Brand logo assets with semantic tags for different use cases")
    ] = None
    colors: Annotated[Colors | None, Field(description="Brand color palette")] = None
    fonts: Annotated[Fonts | None, Field(description="Brand typography guidelines")] = None
    tone: Annotated[
        str | None,
        Field(
            description="Brand voice and messaging tone (e.g., 'professional', 'casual', 'humorous', 'trustworthy', 'innovative')"
        ),
    ] = None
    tagline: Annotated[str | None, Field(description="Brand tagline or slogan")] = None
    assets: Annotated[
        list[Asset12] | None,
        Field(
            description="Brand asset library with explicit assets and tags. Assets are referenced inline with URLs pointing to CDN-hosted files."
        ),
    ] = None
    product_catalog: Annotated[
        ProductCatalog11 | None,
        Field(
            description="Product catalog information for e-commerce advertisers. Enables SKU-level creative generation and product selection."
        ),
    ] = None
    disclaimers: Annotated[
        list[Disclaimer] | None,
        Field(description="Legal disclaimers or required text that must appear in creatives"),
    ] = None
    industry: Annotated[
        str | None, Field(description="Industry or vertical (e.g., 'retail', 'automotive', 'finance', 'healthcare')")
    ] = None
    target_audience: Annotated[str | None, Field(description="Primary target audience description")] = None
    contact: Annotated[Contact | None, Field(description="Brand contact information")] = None
    metadata: Annotated[Metadata | None, Field(description="Additional brand metadata")] = None


class DeliveryType(Enum):
    guaranteed = "guaranteed"
    non_guaranteed = "non_guaranteed"


class FormatType(Enum):
    video = "video"
    display = "display"
    audio = "audio"


class FormatId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    agent_url: Annotated[
        AnyUrl,
        Field(
            description="URL of the agent that defines this format (e.g., 'https://creatives.adcontextprotocol.org' for standard formats, or 'https://publisher.com/.well-known/adcp/sales' for custom formats)"
        ),
    ]
    id: Annotated[
        str,
        Field(
            description="Format identifier within the agent's namespace (e.g., 'display_300x250', 'video_standard_30s')",
            pattern="^[a-zA-Z0-9_-]+$",
        ),
    ]


class Filters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    delivery_type: Annotated[
        DeliveryType | None, Field(description="Type of inventory delivery", title="Delivery Type")
    ] = None
    is_fixed_price: Annotated[bool | None, Field(description="Filter for fixed price vs auction products")] = None
    format_types: Annotated[list[FormatType] | None, Field(description="Filter by format types")] = None
    format_ids: Annotated[list[FormatId] | None, Field(description="Filter by specific format IDs")] = None
    standard_formats_only: Annotated[
        bool | None, Field(description="Only return products accepting IAB standard formats")
    ] = None
    min_exposures: Annotated[
        int | None, Field(description="Minimum exposures/impressions needed for measurement validity", ge=1)
    ] = None


class GetProductsRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    brief: Annotated[str | None, Field(description="Natural language description of campaign requirements")] = None
    brand_manifest: Annotated[
        BrandManifest | BrandManifest10 | AnyUrl,
        Field(
            description="Brand manifest provided either as an inline object or a URL string pointing to a hosted manifest",
            examples=[
                {
                    "description": "Inline brand manifest",
                    "data": {
                        "url": "https://acmecorp.com",
                        "name": "ACME Corporation",
                        "colors": {"primary": "#FF6B35"},
                    },
                },
                {
                    "description": "URL string reference to hosted manifest",
                    "data": "https://cdn.acmecorp.com/brand-manifest.json",
                },
            ],
            title="Brand Manifest Reference",
        ),
    ]
    filters: Annotated[Filters | None, Field(description="Structured filters for product discovery")] = None
