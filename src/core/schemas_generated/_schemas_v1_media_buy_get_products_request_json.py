# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_get-products-request_json.json
#   timestamp: 2025-10-13T04:58:05+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated

from pydantic import BaseModel, ConfigDict, Field


class DeliveryType(Enum):
    guaranteed = "guaranteed"
    non_guaranteed = "non_guaranteed"


class FormatType(Enum):
    video = "video"
    display = "display"
    audio = "audio"


class Filters(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    delivery_type: Annotated[
        DeliveryType | None, Field(description="Type of inventory delivery", title="Delivery Type")
    ] = None
    is_fixed_price: Annotated[bool | None, Field(description="Filter for fixed price vs auction products")] = None
    format_types: Annotated[list[FormatType] | None, Field(description="Filter by format types")] = None
    format_ids: Annotated[list[str] | None, Field(description="Filter by specific format IDs")] = None
    standard_formats_only: Annotated[
        bool | None, Field(description="Only return products accepting IAB standard formats")
    ] = None
    min_exposures: Annotated[
        int | None, Field(description="Minimum exposures/impressions needed for measurement validity", ge=1)
    ] = None


class GetProductsRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    adcp_version: Annotated[
        str | None, Field(description="AdCP schema version for this request", pattern="^\\d+\\.\\d+\\.\\d+$")
    ] = "1.6.0"
    brief: Annotated[str | None, Field(description="Natural language description of campaign requirements")] = None
    promoted_offering: Annotated[str, Field(description="Description of advertiser and what is being promoted")]
    filters: Annotated[Filters | None, Field(description="Structured filters for product discovery")] = None
