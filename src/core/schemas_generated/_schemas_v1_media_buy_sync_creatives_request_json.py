# generated by datamodel-codegen:
#   filename:  _schemas_v1_media-buy_sync-creatives-request_json.json
#   source_etag: W/"68ee6f3c-1091"
#   source_last_modified: Tue, 14 Oct 2025 15:41:48 GMT

from __future__ import annotations

from enum import Enum
from typing import Annotated, Literal, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, Field


class FormatId(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    agent_url: Annotated[
        AnyUrl,
        Field(
            description="URL of the agent that defines this format (e.g., 'https://creatives.adcontextprotocol.org' for standard formats, or 'https://publisher.com/.well-known/adcp/sales' for custom formats)"
        ),
    ]
    id: Annotated[
        str,
        Field(
            description="Format identifier within the agent's namespace (e.g., 'display_300x250', 'video_standard_30s')",
            pattern="^[a-zA-Z0-9_-]+$",
        ),
    ]


class Assets(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["image"]
    url: Annotated[AnyUrl, Field(description="URL to the image asset")]
    width: Annotated[Optional[int], Field(description="Image width in pixels", ge=1)] = None
    height: Annotated[Optional[int], Field(description="Image height in pixels", ge=1)] = None
    format: Annotated[Optional[str], Field(description="Image file format (jpg, png, gif, webp, etc.)")] = None
    alt_text: Annotated[Optional[str], Field(description="Alternative text for accessibility")] = None


class Assets64(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["video"]
    url: Annotated[AnyUrl, Field(description="URL to the video asset")]
    width: Annotated[Optional[int], Field(description="Video width in pixels", ge=1)] = None
    height: Annotated[Optional[int], Field(description="Video height in pixels", ge=1)] = None
    duration_ms: Annotated[Optional[int], Field(description="Video duration in milliseconds", ge=0)] = None
    format: Annotated[Optional[str], Field(description="Video file format (mp4, webm, mov, etc.)")] = None
    bitrate_kbps: Annotated[Optional[int], Field(description="Video bitrate in kilobits per second", ge=1)] = None


class Assets65(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["audio"]
    url: Annotated[AnyUrl, Field(description="URL to the audio asset")]
    duration_ms: Annotated[Optional[int], Field(description="Audio duration in milliseconds", ge=0)] = None
    format: Annotated[Optional[str], Field(description="Audio file format (mp3, wav, aac, etc.)")] = None
    bitrate_kbps: Annotated[Optional[int], Field(description="Audio bitrate in kilobits per second", ge=1)] = None


class Assets66(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["text"]
    content: Annotated[str, Field(description="Text content")]
    max_length: Annotated[Optional[int], Field(description="Maximum character length constraint", ge=1)] = None
    language: Annotated[Optional[str], Field(description="Language code (e.g., 'en', 'es', 'fr')")] = None


class Assets67(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["html"]
    content: Annotated[str, Field(description="HTML content")]
    version: Annotated[Optional[str], Field(description="HTML version (e.g., 'HTML5')")] = None


class Assets68(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["css"]
    content: Annotated[str, Field(description="CSS content")]
    media: Annotated[Optional[str], Field(description="CSS media query context (e.g., 'screen', 'print')")] = None


class ModuleType(Enum):
    esm = "esm"
    commonjs = "commonjs"
    script = "script"


class Assets69(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["javascript"]
    content: Annotated[str, Field(description="JavaScript content")]
    module_type: Annotated[Optional[ModuleType], Field(description="JavaScript module type")] = None


class VastVersion(Enum):
    field_2_0 = "2.0"
    field_3_0 = "3.0"
    field_4_0 = "4.0"
    field_4_1 = "4.1"
    field_4_2 = "4.2"


class TrackingEvent(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    click = "click"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"
    fullscreen = "fullscreen"
    exit_fullscreen = "exitFullscreen"
    player_expand = "playerExpand"
    player_collapse = "playerCollapse"


class Assets70(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns VAST XML")]
    content: Annotated[Optional[str], Field(description="Inline VAST XML content")] = None
    vast_version: Annotated[Optional[VastVersion], Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        Optional[bool], Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        Optional[int], Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        Optional[int], Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        Optional[list[TrackingEvent]], Field(description="Tracking events supported by this VAST tag")
    ] = None


class Assets71(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["vast"]
    url: Annotated[Optional[AnyUrl], Field(description="URL endpoint that returns VAST XML")] = None
    content: Annotated[str, Field(description="Inline VAST XML content")]
    vast_version: Annotated[Optional[VastVersion], Field(description="VAST specification version")] = None
    vpaid_enabled: Annotated[
        Optional[bool], Field(description="Whether VPAID (Video Player-Ad Interface Definition) is supported")
    ] = None
    max_wrapper_depth: Annotated[
        Optional[int], Field(description="Maximum allowed wrapper/redirect depth", ge=0, le=10)
    ] = None
    duration_ms: Annotated[
        Optional[int], Field(description="Expected video duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        Optional[list[TrackingEvent]], Field(description="Tracking events supported by this VAST tag")
    ] = None


class DaastVersion(Enum):
    field_1_0 = "1.0"
    field_1_1 = "1.1"


class TrackingEvent22(Enum):
    start = "start"
    first_quartile = "firstQuartile"
    midpoint = "midpoint"
    third_quartile = "thirdQuartile"
    complete = "complete"
    impression = "impression"
    pause = "pause"
    resume = "resume"
    skip = "skip"
    mute = "mute"
    unmute = "unmute"


class Assets72(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[AnyUrl, Field(description="URL endpoint that returns DAAST XML")]
    content: Annotated[Optional[str], Field(description="Inline DAAST XML content")] = None
    daast_version: Annotated[Optional[DaastVersion], Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        Optional[int], Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        Optional[list[TrackingEvent22]], Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[Optional[bool], Field(description="Whether companion display ads are included")] = None


class Assets73(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["daast"]
    url: Annotated[Optional[AnyUrl], Field(description="URL endpoint that returns DAAST XML")] = None
    content: Annotated[str, Field(description="Inline DAAST XML content")]
    daast_version: Annotated[Optional[DaastVersion], Field(description="DAAST specification version")] = None
    duration_ms: Annotated[
        Optional[int], Field(description="Expected audio duration in milliseconds (if known)", ge=0)
    ] = None
    tracking_events: Annotated[
        Optional[list[TrackingEvent22]], Field(description="Tracking events supported by this DAAST tag")
    ] = None
    companion_ads: Annotated[Optional[bool], Field(description="Whether companion display ads are included")] = None


class Colors(BaseModel):
    primary: Optional[str] = None
    secondary: Optional[str] = None
    accent: Optional[str] = None


class Assets74(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["promoted_offerings"]
    url: Annotated[
        Optional[AnyUrl], Field(description="URL of the advertiser's brand or offering (e.g., https://retailer.com)")
    ] = None
    colors: Annotated[Optional[Colors], Field(description="Brand colors")] = None
    fonts: Annotated[Optional[list[str]], Field(description="Brand fonts")] = None
    tone: Annotated[Optional[str], Field(description="Brand tone/voice")] = None


class Assets75(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    asset_type: Literal["url"]
    url: Annotated[AnyUrl, Field(description="URL reference")]
    description: Annotated[Optional[str], Field(description="Description of what this URL points to")] = None


class Input(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Annotated[str, Field(description="Human-readable name for this preview variant")]
    macros: Annotated[Optional[dict[str, str]], Field(description="Macro values to apply for this preview")] = None
    context_description: Annotated[
        Optional[str], Field(description="Natural language description of the context for AI-generated content")
    ] = None


class Creative(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creative_id: Annotated[str, Field(description="Unique identifier for the creative")]
    name: Annotated[str, Field(description="Human-readable creative name")]
    format_id: Annotated[
        FormatId, Field(description="Structured format identifier with agent URL and format name", title="Format ID")
    ]
    assets: Annotated[
        dict[
            str,
            Union[
                Assets,
                Assets64,
                Assets65,
                Assets66,
                Assets67,
                Assets68,
                Assets69,
                Union[Assets70, Assets71],
                Union[Assets72, Assets73],
                Assets74,
                Assets75,
            ],
        ],
        Field(description="Assets required by the format, keyed by asset_role"),
    ]
    inputs: Annotated[
        Optional[list[Input]],
        Field(description="Preview contexts for generative formats - defines what scenarios to generate previews for"),
    ] = None
    tags: Annotated[Optional[list[str]], Field(description="User-defined tags for organization and searchability")] = (
        None
    )
    approved: Annotated[
        Optional[bool],
        Field(
            description="For generative creatives: set to true to approve and finalize, false to request regeneration with updated assets/message. Omit for non-generative creatives."
        ),
    ] = None


class ValidationMode(Enum):
    strict = "strict"
    lenient = "lenient"


class Scheme(Enum):
    bearer = "Bearer"
    hmac_sha256 = "HMAC-SHA256"


class Authentication(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    schemes: Annotated[
        list[Scheme],
        Field(
            description="Array of authentication schemes. Supported: ['Bearer'] for simple token auth, ['HMAC-SHA256'] for signature verification (recommended for production)",
            max_length=1,
            min_length=1,
        ),
    ]
    credentials: Annotated[
        str,
        Field(
            description="Credentials for authentication. For Bearer: token sent in Authorization header. For HMAC-SHA256: shared secret used to generate signature. Minimum 32 characters. Exchanged out-of-band during onboarding.",
            min_length=32,
        ),
    ]


class PushNotificationConfig(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    url: Annotated[AnyUrl, Field(description="Webhook endpoint URL for task status notifications")]
    token: Annotated[
        Optional[str],
        Field(
            description="Optional client-provided token for webhook validation. Echoed back in webhook payload to validate request authenticity.",
            min_length=16,
        ),
    ] = None
    authentication: Annotated[
        Authentication, Field(description="Authentication configuration for webhook delivery (A2A-compatible)")
    ]


class SyncCreativesRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    creatives: Annotated[
        list[Creative], Field(description="Array of creative assets to sync (create or update)", max_length=100)
    ]
    patch: Annotated[
        Optional[bool],
        Field(
            description="When true, only provided fields are updated (partial update). When false, entire creative is replaced (full upsert)."
        ),
    ] = False
    assignments: Annotated[
        Optional[dict[str, list[str]]], Field(description="Optional bulk assignment of creatives to packages")
    ] = None
    delete_missing: Annotated[
        Optional[bool],
        Field(
            description="When true, creatives not included in this sync will be archived. Use with caution for full library replacement."
        ),
    ] = False
    dry_run: Annotated[
        Optional[bool],
        Field(
            description="When true, preview changes without applying them. Returns what would be created/updated/deleted."
        ),
    ] = False
    validation_mode: Annotated[
        Optional[ValidationMode],
        Field(
            description="Validation strictness. 'strict' fails entire sync on any validation error. 'lenient' processes valid creatives and reports errors."
        ),
    ] = "strict"
    push_notification_config: Annotated[
        Optional[PushNotificationConfig],
        Field(
            description="Webhook configuration for asynchronous task notifications. Uses A2A-compatible PushNotificationConfig structure. Supports Bearer tokens (simple) or HMAC signatures (production-recommended).",
            title="Push Notification Config",
        ),
    ] = None
