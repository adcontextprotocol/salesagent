name: UI Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'admin_ui.py'
      - 'templates/**'
      - 'static/**'
      - 'ui_tests/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'admin_ui.py'
      - 'templates/**'
      - 'static/**'
      - 'ui_tests/**'
  workflow_dispatch:

jobs:
  ui-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: adcp_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: adcp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-playwright
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r ui_tests/requirements.txt
    
    - name: Install Playwright browsers
      run: |
        cd ui_tests
        python run_tests.py --install-browsers
    
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://adcp_user:test_password@localhost:5432/adcp_test
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        SUPER_ADMIN_EMAILS: test@example.com
      run: |
        # Run migrations
        python migrate.py
        
        # Initialize test data
        python init_database.py
        
        # Create test tenant
        python setup_tenant.py "Test Publisher" \
          --adapter mock \
          --subdomain test-publisher
    
    - name: Start application servers
      env:
        DATABASE_URL: postgresql://adcp_user:test_password@localhost:5432/adcp_test
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        SUPER_ADMIN_EMAILS: test@example.com
      run: |
        # Start MCP server
        python main.py &
        echo $! > mcp_server.pid
        
        # Start Admin UI
        python admin_ui.py &
        echo $! > admin_ui.pid
        
        # Wait for servers to start
        sleep 10
        
        # Check servers are running
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8001/ || exit 1
    
    - name: Run UI tests
      env:
        BASE_URL: http://localhost:8001
        TEST_ADMIN_EMAIL: test@example.com
        HEADLESS: true
      run: |
        cd ui_tests
        python run_tests.py --report --parallel 2
    
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: |
          ui_tests/reports/
          ui_tests/screenshots/
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./ui_tests/reports/coverage.xml
        fail_ci_if_error: false
    
    - name: Stop servers
      if: always()
      run: |
        if [ -f mcp_server.pid ]; then
          kill $(cat mcp_server.pid) || true
        fi
        if [ -f admin_ui.pid ]; then
          kill $(cat admin_ui.pid) || true
        fi
    
    - name: Post results to PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const reportPath = 'ui_tests/reports/test_report.html';
          
          if (fs.existsSync(reportPath)) {
            // Parse test results
            const report = fs.readFileSync(reportPath, 'utf8');
            const passed = (report.match(/passed/g) || []).length;
            const failed = (report.match(/failed/g) || []).length;
            
            // Create comment
            const comment = `## UI Test Results
            
            ✅ **Passed:** ${passed}
            ❌ **Failed:** ${failed}
            
            [View full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }